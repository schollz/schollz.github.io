[{"categories":null,"contents":" Github, Gitlab, Bitbucket are all web interfaces for git. They all do similar things that add on features that aren\u0026rsquo;t implicit in git, like issues and wiki, etc.\nUnbeknownst to some, fossil is an alternative to git that actually has built-in issues, wiki, and easily self-hosts. This is a quickstart to get started with hosting and cloning fossil repos. The official quickstart is very good, although I realized a few tricks in getting the hosting to work on HTTPS behind a reverse-proxy, which are described here.\nBefore you begin First, download fossil. There are already binaries available for fossil, you can find them here.\nNew fossil Make sure to save each fossil repo with the extension .fossil - this is very important if you want to do hosting.\nNow you can make a new fossil with the init subcommand.\n\u0026gt; fossil init -A schollz 3.fossil project-id: 7165366dc9d0d3c827573c8ef12cb760f2caa236 server-id: 56adcebbf59b06eb4b621d3daca59f5aa87a9a08 admin-user: schollz (initial password is \u0026quot;35a6g1\u0026quot;)  This will make a new repository, 3.fossil, with a user schollz and default password 35a6g1. You can then change the default password for schollz. Here you have to enter the password on the command-line, but I like to add it to a file to prevent it from showing up in the bash history.\n\u0026gt; vim pass # enter your password in this file \u0026gt; fossil user password schollz `cat pass` -R 3.fossil \u0026gt; rm pass # this ensures your password doesn't enter the bash history  Want to add another user? Its also easy:\n\u0026gt; fossil user new user2 user2@somewhere.com -R 3.fossil  Hosting fossils Say now you have several fossils in the same folder. Make sure that each has the .fossil suffix - this is very important.\n\u0026gt; ls fossils 1.fossil 2.fossil 3.fossil  Then you can start a server that uses HTTPS:\n\u0026gt; fossil server . --https --port 8079 --repolist  The --https flag implies HTTPS, so you have to host a reverse-proxy that uses SSL. Its super easy to do this if you are using Caddy as a reverse-proxy (which easily adds HTTPS). In this case your Caddyfile will look like:\nfossil.schollz.com { proxy / 127.0.0.1:8079 { transparent } gzip log logs/fossil.schollz.com.log }  where you just replace fossil.schollz.com with yourdomain.com.\nCloning fossil Cloning is easy, just make sure to include your user name so you will have the rights to push changes (unless you want to just have your own copy). If you are using \u0026ldquo;fossil server .\u0026rdquo; like above, then you need to add /repo to tell it you want to clone repo.fossil. For instance, to clone 3.fossil\nfossil clone https://schollz@fossil.schollz.com/3 3.fossil  You will be prompted for the password, which is the same password that you set up top. Now you can open the repo.\n\u0026gt; fossil open 3.fossil  Things are then pretty similar to git. You can add and commit files:\n\u0026gt; touch README.md \u0026gt; fossil add README.md \u0026gt; fossil commit README.md # this will automatically push  You can easily create pull (get latest changes):\n\u0026gt; fossil sync  General I like to have the README.md in the main repo be the first thing you see on the web UI - just like Github/Gitlab/Bitbucket. To do this, make a README.md file and then goto Admin -\u0026gt; Configuration and look for the Index Page and change it to /doc/tip/README.md. Make sure to then press \u0026ldquo;Apply Changes\u0026rdquo; at the top.\nAnother trick - you can add fossil as a parameter to your ~/.zshrc if you are using oh-my-zsh (if you aren\u0026rsquo;t using it, why?). Just make sure you have this line:\nplugins=(git history fossil)  Using go It seems like it may not be able to use Go with self-hosted fossil repositories yet.\n","permalink":"/fossil/","tags":["coding"],"title":"Self-hosting with fossil, an alternative to git"},{"categories":null,"contents":"There are some great ways to archive sites on the web. You can use archive.is or the Internet Archive. But, using the IPFS, its really easy to make your own hosted internet archive.\nSay you found a cool website, like www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/ which shows how a Kalman filter works. All you need to do is recursively download the site, with cross-domain assets, and then pin it to IPFS.\n$ mkdir site1 \u0026amp;\u0026amp; cd site1 $ wget --restrict-file-names=windows -k --adjust-extension --span-hosts --convert-links --backup-converted --page-requisites http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/ $ cd ../ \u0026amp;\u0026amp; ipfs add -r site1 -Q \u0026lt;some hash\u0026gt; $ ipfs pin add -r \u0026lt;some hash\u0026gt;  That\u0026rsquo;s it! IPFS will automatically resuse assets if they have the same hash, so common files (CSS, JS) will only ever be added once. You can then view your site with the IPFS gateway. For example, the site above is available at https://ipfs.io/ipfs/QmdLSyPnQLiVk1wy91tZvhVfqbFbD7zSCuRtC51Z9yeY8E/www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/.\n","permalink":"/ipfs-enabled-personal-internet-archive/","tags":["ipfs"],"title":"IPFS enabled personal internet archive"},{"categories":null,"contents":"There\u0026rsquo;s a bit of a chicken-and-egg problem with IPFS to get pages to link to each other that is frusturating to IPFS users. To have the IPFS hash for the link you first need to get the IPFS hash of the other link. One way around this is to make all the URLs relative. This is a lot easier to do than you think.\nFirst make a blog however you want and then host it locally, e.g. at localhost:1313 (for Hugo people).\nThen open another terminal and do the following wget command:\n$ wget -k --recursive --no-clobber --page-requisites --adjust-extension --span-hosts --convert-links --restrict-file-names=windows --domains localhost --no-parent http://localhost:1313/  This will generate a offline version of your website that has everything with relative links. Now create an IPFS version using the downloaded version with\n$ ipfs add -r localhost+1313 -Q \u0026lt;your hash\u0026gt;  Now you can view your site on IPFS at https://ipfs.io/ipfs/\u0026lt;your hash\u0026gt;.\n","permalink":"/how-to-post-a-site-to-ipfs/","tags":["ipfs","coding"],"title":"How to post a site to IPFS easily"},{"categories":null,"contents":"I\u0026rsquo;ve thought a lot about the recipe when making food.1 Lately I\u0026rsquo;ve been thinking about what kind of recipe you need to truly make something from scratch. To truly make a recipe from scratch you need only a few ingredients: sun, water, soil, and seeds.2 I previously made a website with various recipes that lets you see the work flows for creating different foods from scratch.3 I\u0026rsquo;ve now created another website, recursive.recipes, which lets you scale recipes and better visualize their costs (time + money) with creating them from scratch various stages.\n\nMaking this tool was a little challenging, but in a fun way. The costs in time turned out to be non-trivial. I determined that there needed to be two types of time costs - parallel and serial. Basically, the serial time scales with the quantity, while parallel time does not (i.e. it can be done in parallel). For example, when harvesting a field of wheat, the parallel time is the time it takes to grow, which is independent of the quantity. The serial time is the time it takes to harvest, which is dependent on the quantity.\nThe monetary costs also were not easy to determine. I used the latest grocery prices, and tried to scale everything to volumetric or whole measures, for comparing. Obviously this becomes problematic when trying to determine how much volume a 1 lb steak takes up as it also requires computing the average density of the substance. Also the costs themselves were determined for farms from farming data, although they can have quite a lot of variance.\nThe hardest part where more questions about one-time cost versus recurring cost. The calculator I was making calculated one-time costs. But then, the advantages of farming are based on recurring costs. That is, you don\u0026rsquo;t buy an entire cow just to make milk for one stick of butter. You obviously would use the cow over and over again to create many sticks of butter. How many? This is the hard thing to find out. Also, this might depend on whether you are making butter or just pasteurizing to make milk. For now, though, I\u0026rsquo;ve assumed the things like this that have huge recurring benefits to have a cost of free.\nThere is still room for improvement. All of the data for the tool is in a single file, recipes.toml, so it is readily amended. Actually, the entire website is open-source4 and on Github if you are interested in checking it out or making a pull request for your favorite recipe.\n Definitely too much. I\u0026rsquo;ve already made a website for pair-wise ingredient comparison and for averaging recipes. [return] By seeds I mean from animals (eggs), bacteria (cells), fungi (spores), or plants. [return] timetomakefood.com - for more information on my previous tool, check out a post I did previously titled \u0026ldquo;Recursive ingredients\u0026ldquo;. [return] Technically, all websites are open-source, but here I mean you can access the backend as well. [return]   ","permalink":"/recursive-recipes/","tags":["food"],"title":"Recursive recipes"},{"categories":null,"contents":"Keybase is a great system for mounting a end-to-end encrypted filesystem. It also has an encrypted git feature which is great for storing secure information in repositories. While keybase has releases for most systems, that don\u0026rsquo;t have any releases for armh, of which Chromebooks fall.\nWith help from the keybase developers I have determined a way to get keybase up and running on a Chromebook in no time.\nFirst install the pre-requisites:\n$ sudo apt-get install fuse  Then install keybase:\n$ go get -u -v github.com/keybase/client/go/keybase $ go install -v -tags production github.com/keybase/client/go/keybase  Login with your keybase name (or add the computer if it isn\u0026rsquo;t already added.\n$ keybase login  Now install the keybase filesystem, kbfsfuse:\n$ go get -v github.com/keybase/kbfs/... $ cd $GOPATH/src/github.com/keybase/kbfs/kbfsfuse $ go install $ sudo mkdir -p /keybase $ sudo chown $USER /keybase $ KEYBASE_RUN_MODE=prod kbfsfuse /keybase \u0026amp;  And finally, install the git-remote-keybase for using git with keybase.\n$ cd $GOPATH/src/github.com/keybase/kbfs/kbfsgit/git-remote-keybase $ go install  ","permalink":"/installing-keybase-on-chromebook/","tags":["coding"],"title":"Installing Keybase on Chromebook"},{"categories":null,"contents":"I\u0026rsquo;ve been enjoying writing in vim a lot more. There is a nice and simple way to make writing a lot easier (word-wrapping, nice color scheme). You can just make the following config file (save as ~/.vimrc):\nfunc! WordProcessorMode() set columns=80 setlocal formatoptions=1 setlocal noexpandtab map j gj map k gk setlocal spell spelllang=en_us set complete+=s set formatprg=par setlocal wrap setlocal linebreak set foldcolumn=3 highlight Normal ctermfg=black ctermbg=grey hi NonText ctermfg=grey guifg=grey endfu com! WP call WordProcessorMode()  Then, while in vim you can activate the word processing mode by typing :WP.\n","permalink":"/my-favorite-vimrc/","tags":["coding"],"title":"My Favorite Vimrc"},{"categories":null,"contents":" This is a ready-to-go Hugo-based blog publishing system. The styling has a lot of inspiration from the blog of Chris Siebenmann which I think excels in simplicity and minimalism. It uses mage for an OS-agnostic build system to make it easy to chain commands. It has a simple search and comments ready-to-go.\nFeatures  Integrated search (try it) Integrated comments at the bottom of each post Automatic image captioning using markdown Very fast (base page ~3.9kB) Easy to get started and run  Get started You need to have Go installed. Then install dependencies:\n$ go get github.com/magefile/mage $ go get github.com/spf13/viper  The install Hugo by just downloading the latest release.\nNow you should start a new repo and add hugocraft.\n$ mkdir my-blog \u0026amp;\u0026amp; cd my-blog $ git init $ git remote add upstream https://github.com/schollz/hugocraft.git $ git fetch upstream $ git merge upstream/master  Now you are ready to use!\nHow to use Writing To get started, you can make a new post:\n$ mage new  You\u0026rsquo;ll be prompted for a name and then the post will be created. You can open the post in your favorite editor to edit it.\nOr, if you like using vim you can just do\n$ mage write  When you want to push your latest changes just do\n$ mage push  IPFS publishing First install ipfs and make sure you have wget. Run your ipfs instance (ipfs daemon) Then you can easily publish to IPFS using\n$ mage ipfs  which will return your hash. Now you can view your site at https://ipfs.ip/ipfs/\u0026lt;your hash\u0026gt;.\nGithub publishing And when you are ready to publish you need to set your repo name. Goto the config.toml and just change githubPublish to your Github repo, e.g. user/user.github.io. Then you can publish by just doing\n$ mage publish  which will build and minify the results into the tmp/ directory.\nGet latest hugocraft After you\u0026rsquo;ve forked this repo, you can update with\n$ mage update  which will do the following commands to merge the upstream hugocraft fork:\ngit remote add upstream https://github.com/schollz/hugocraft.git git fetch upstream git merge upstream/master  ","permalink":"/hugocraft/","tags":["thoughts"],"title":"Hugo Craft"},{"categories":null,"contents":" This is a little hack to use shallow clones for new git checkouts with go get. Unfortunately for Gophers, this has been an open issue for three years counting without a workable solution aside from patching the go toolchain yourself. This solution utilizes a git wrapper that determines if a pull/clone is happening and then makes sure it is shallow.\nThe wrapper is only a few lines of code, here\u0026rsquo;s the main.go:\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { args := os.Args if len(args) \u0026gt; 1 { if args[1] == \u0026#34;pull\u0026#34; { args = append(args[:2], append([]string{\u0026#34;--depth=1\u0026#34;}, args[2:]...)...) } else if args[1] == \u0026#34;clone\u0026#34; { args = append(args[:2], append([]string{\u0026#34;--depth=1\u0026#34;, \u0026#34;--shallow-submodules\u0026#34;, \u0026#34;--single-branch\u0026#34;}, args[2:]...)...) } } args[0] = \u0026#34;/usr/bin/git\u0026#34; cmd := exec.Command(args[0]) if len(args) \u0026gt; 0 { cmd = exec.Command(args[0], args[1:]...) } cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr err := cmd.Run() if err != nil { os.Exit(1) } } To make it easy, I\u0026rsquo;ve saved this code as main.go in a repo named git (schollz/git). The repo is named \u0026ldquo;git\u0026rdquo; on purpose so that your GOPATH can be prepended to the PATH and then the wrapper can be substituted for the real git (/usr/bin/git). So then, to activate shallow cloning all you have to do is:\n$ go get github.com/schollz/git $ export PATH=$GOPATH/bin:$PATH  which you can add to your .bashrc files if you want it to be permanent. This way, the wrapper will aways be used and the wrapper will force cloning to be shallow.\nBenchmarks Here\u0026rsquo;s a benchmark showing a 50% reduction in disk usage and thus a 50% reduction in time taken for a go get. You\u0026rsquo;ll not get that much for smaller repositories, but its not bad.\nnormal go get % docker run -it golang:1.10 /bin/bash root@d9208178f1fa:/go# time go get github.com/juju/juju/... real 7m35.631s user 1m40.059s sys 0m45.436s root@d9208178f1fa:/go# du -sh . 1.1G  shallow go get % docker run -it golang:1.10 /bin/bash root@68135fb64a3e:/go# go get github.com/schollz/git root@68135fb64a3e:/go# export PATH=$GOPATH/bin:$PATH root@68135fb64a3e:/go# time go get github.com/juju/juju/... real 3m0.335s user 0m29.192s sys 0m17.253s root@d9208178f1fa:/go# du -sh . 499M .  Acknowledgements Thanks tscholl2 for the idea.\n","permalink":"/shallow-go-get/","tags":["coding","golang"],"title":"Shallow `go get`"},{"categories":null,"contents":"Hacking1 and painting2 are both hobbies for me. I write programs for myself, to make things easier or just because they are fun to write. Few of these programs are useful3. More often I write useless programs, like a program to determine if random squiggles generate random numbers4. I started painting and coding about fifteen years ago5 for my own enjoyment. Along the way, though I\u0026rsquo;ve found some interesting comparisons about the reception of paintings and programs and whats it like to interact with other hackers and painters.\nThere are many similarities between hacking and painting. Actually, I find the similarities are little boring because a similarity means that there is no real reason to take up both hacking and painting because you could theoretically derive the useful characteristics by just taking up just one. I agree with similarities outlined in Paul Graham\u0026rsquo;s book Hackers \u0026amp; Painters6 - that both hackers and painters use past references to learn from - museums for painters, and open-source repos for hackers. Also, both hacking and painting require learning by doing, rather than by reading. Both require building on what you\u0026rsquo;ve done previously, although I don\u0026rsquo;t think this is specific to just painting and programming. Both also generally require developing the final product through gradual refinement.\nThe differences between hacking and painting are a lot more exciting, as they reveal the potential benefits of one activity versus the other, as well as where one activity has deficiencies. In painting, mistakes can often be incorporated to yield even better results, whereas in programming, a mistake often begets more mistakes. In painting, you are dealing with the brain which is quite sophisticated in specific areas, like recognizing faces which means that some aspects of a painting which require only a speck of paint (the iris, the curve of a mouth) will make or break the painting. In this sense, the painter has it harder because they have to deal with sporadic episodes requiring surgical precision.\nIn terms of general reception, though, I think the hacker might have it harder than the painter. One big difference between hackers and painters is who the audience is. In both cases, the audience is human, but the number of humans who make up that audience is different. In painting, the audience is often a single person. The majority of paintings in the world do not hang in museums seen by millions - the majority of paintings hang in homes and are placed their by only a single person who thought it was beautiful enough to purchase, to send to their friend, or create themselves. In contrast, for hackers, the audience is anyone who can download your code which, thanks to Github/Gitlab/Bitbucket, can be hundreds and thousands of people. This difference in audiences becomes a problem for the public perception of writing programs. When I tell someone I\u0026rsquo;m coding a silly program, like writing a program to use squiggles to validate random numbers, I often get a reaction like Why would you do that?, presumably because they imagine how little impact that would make on the huge audience. Alternatively, if I tell someone I\u0026rsquo;m going to paint a silly picture, like a bunch of squiggles, the reaction is more like Cool, very avante-garde because they realize that there is one person out there who would love such a thing. It seems to me that painters, and not programmers, have the benefit of having their motivation be sacrosanct because only one person need find it useful. Put another way, it seems that since coding can yield useful things for many people, it must always be put to use in a useful way for many people. However, I don\u0026rsquo;t let this stop me and I hope it doesn\u0026rsquo;t stop you.\nAnother big difference is that, in painting, the proof is in the eating of the pudding. If the painting is beautiful to the audience (which can be a single person), then it is a success and there is not much to critique. Whereas, in programming, even though a program works and does what is is designed to do, it remains open to criticism in ways that don\u0026rsquo;t relate to its functionality, e.g. whether it uses the right VCS, or is written in an idiomatic way.7 For some reason, in programming, the proof is not only in the eating of the pudding but also the steps leading up to the creation of the pudding. I think that this is because a painting is to be enjoyed, whereas coding is often to be used (and enjoyed hopefully too). So while most paintings are judged by what they are, programs are often judged by what they are and by what they are not. No programmer ever says to another, This is not missing any features! Instead, the community of open-source programmers often utilize (or abuse) the conduits of communication, creating \u0026ldquo;issues\u0026rdquo; that are just features for their own use.\nThese differences in painting versus hacking leads me to a sour aspect of the of being a hacker in the open-source community. The majority of painters enjoy creating without a narrow definition of motivation and their creations are enjoyed unconditionally by the painting community. Programmers who enter the open-source community may find that they should be motivated to only create what is useful, make it written well, and then support the code to the feature requests of others. I love the open-source community (its far superior to the research community) but I am frequently pummeled by bad apples for not giving them free help or integrating the features they want or fixing the bugs they want. For example, one recent bad apple posed as a Github user but actually worked at a company requested a feature, and when I said I would integrate it at a reasonable fee to their company they responded You should be the one paying me (presumably for providing the feature idea?). What if there was a Github for paintings where you would \u0026ldquo;fork\u0026rdquo; and literally get a free painting? That would be amazing, and I would be so appreciative of that. That\u0026rsquo;s what hackers have right now, but I often see a huge lack of gratitude or appreciation (actually I frequently experience the opposite).\nCurrently being a painter is more enjoyable than being a hacker. I wish that the opposite should be true since hackers, and not painters, can easily push and pull contributions onto the same project and create collaborations with the click of a mouse. However, This push and pull of the open-source community runs on gratitude, of which there is not quite enough to keep it running smoothly. To keep it running, I hope that hackers can find more ways to begin their interactions with a Thanks: thanks for writing the code, thanks for providing a PR, thanks for the idea, etc. There is even a program to do that: https://saythanks.io/.\n See my github. [return] See my paintings. [return] Maybe my most useful program: FIND3. [return] I was trying to figure out if I could skip using dice. [return] One of my first programs, written in 2003 was a band name generator. [return] Hackers \u0026amp; Painters by Paul Graham. [return] Quote from a friendly critiquer about a recent program I wrote: \u0026rdquo;\u0026hellip;certainly works, and is race-free, but it is non-idiomatic.\u0026rdquo; [return]   ","permalink":"/hackers-and-painters/","tags":["coding","painting","thoughts"],"title":"Painters \u0026 Hackers"},{"categories":null,"contents":" I started out with this great photo by James Wheeler.\n   \nI started out by sketching out the painting, loose white paint on red.\nThe background went very quickly, but I like how it turned out.\nI spent most of the time on the head, but I think the light colors came out well.\nIf you have a picture that you\u0026rsquo;d like me to paint, leave a comment below.\n var myLazyLoad = new LazyLoad();  ","permalink":"/painting-red-heifer/","tags":["painting"],"title":"Painting of Red Heifer"},{"categories":null,"contents":" I recently completed my biggest painting ever, 24\u0026rdquo; by 36\u0026rdquo; canvas with acrylic. I started out with a red canvas because I like how it can surround paintings to make them a little bolder (see some of my other paintings with a red background).\nI picked out the starting picture - of a lone cat on a tiled roof in Jarandilla de la Vera, Spain. The original picture was taken by Fernando Nieto (check out his 500px, its great!).\n\nI started out by sketching out the painting, loose white paint on red.\nI also decided to add another cat into the mix, a great photo taken by Mathew Lorenceau (also has a great 500px account, check it out). You can see the sketched second cat in the top left, but it disappears when I start layering things.\n\nNext I added in lots of colors, clouds, and spend a long time painting bricks. The tiles became quite tedious, and I didn\u0026rsquo;t like how much red was showing through.\nI spent a long time filing in tiles.\nI added the first cat.\nThen I added the second cat.\nThen I added some finalizing details - more highlights on the tiles and some more shading on the clouds. I\u0026rsquo;m pretty happy with the outcome!\nIf you have a picture that you\u0026rsquo;d like me to paint, leave a comment below.\n var myLazyLoad = new LazyLoad();  ","permalink":"/painting-roof/","tags":["painting"],"title":"Painting of roof with cats"},{"categories":null,"contents":"I\u0026rsquo;ve done dozens of races and about 15 marathons since I started running. I\u0026rsquo;ve plotted my pace for 15 official marathons. Its quite obvious now that I\u0026rsquo;ve plateaued at a nominal pace. You can see that I got fast quite quickly - after about three years I hit my plateau of about 8 minutes per mile.\nIn my first three years of running I ran about 20 miles a week - sometimes more, sometimes less. I started running fast and a year of intense training about five years in, which got the lowest dot on that graph - a sub 7 minute per mile marathon (which qualified me for the Boston marathon).\nI also computed my relative placement in marathons to see how I did compared to others. The relative placement is my place overall divided by the number of people in the race. A relative placement of 1 means that I finished last, and 0.5 means I finished right in the middle.\nYou can see that over those first three years my relative placement plunged a lot more than my pace. This shows that you can do a lot better in a race by just increasing your pace a little bit. Currently I\u0026rsquo;m able to hover around the top 15% of any given race.\nI think this is a nice illustration of being able to work for something you want. I wanted to become a marathon runner, so I ran. I started out bad (finishing in the last 20% of the my first marathon) but over three years you can see I gradually improved. You can also see that those improvements have lasted over the years, as I continue to run casually.\n","permalink":"/marathons-2018/","tags":["running"],"title":"Analyzing 15 marathons over 4,000 days"},{"categories":null,"contents":"I recently wrote a program to determine consensus recipes. It scrapes the web for a thousand recipes for a given recipe (e.g. cookies), then clusters the recipes and finally computes an average ingredient list for each cluster. This idea was prompted by making brownies, because I wasn\u0026rsquo;t sure whether to use cocoa, chocolate, or both. Turns out there is a recipe for each variation of brownie.\nI decided to try out my software in the real world. What would one of these average recipes taste like? To see, I computed the average recipes for \u0026ldquo;chocolate chip cookies\u0026rdquo; and took the second largest cluster because it had both baking powder and baking soda.\nThe computed average chocolate chip cookie recipe:\n   Ingredient Amount Variation Rel. Freq.     baking powder 1 tsp ± 1 3\u0026frasl;8 95   baking soda 3\u0026frasl;4 tsp ± 3\u0026frasl;8 75   brown sugar 7\u0026frasl;8 cup ± 3\u0026frasl;8 99   butter 5\u0026frasl;8 cup ± 1\u0026frasl;2 97   chocolate 1 cup ± 5\u0026frasl;8 109   eggs 2 whole ± 3\u0026frasl;4 105   flour 1 1\u0026frasl;4 cup ± 7\u0026frasl;8 116   salt 5\u0026frasl;8 tsp ± 1\u0026frasl;2 86   sugar 3\u0026frasl;8 cup ± 1\u0026frasl;4 100   vanilla 1 5\u0026frasl;8 tsp ± 3 1\u0026frasl;8 100    I used my standard techniques for baking to mix up the ingredients - first mixing wet and then adding dry ingredients and then baking for 10-15 minutes at 350F. They turned out to be much more like cake than cookies. Apparently there was too much baking powder and the ratio of liquid to dry ingredients was too high. They also tasted too sugary. They weren\u0026rsquo;t bad, but they weren\u0026rsquo;t great, so I think they would qualify as average cookies.\nI think part of the problem was that I had trouble converting ingredients to volumes for normalization. Some recipes dictate their recipes in \u0026ldquo;grams\u0026rdquo; or \u0026ldquo;ounces\u0026rdquo; which need to be converted to volume using the density. In this version I used a constant density for everything (0.9 g / ml) which was somewhat between the density for flour and water. However the density for flour (0.6 g / ml) is much lower than the density for water (1 g / ml) and butter (0.9 g / ml).\nWhen I modified the densities, it indeed changed the flour to 1 3\u0026frasl;4 cup instead of 1 1\u0026frasl;4 cup, and reduced the variation from 7\u0026frasl;8 cup to 1\u0026frasl;2 cup. Next time I think I\u0026rsquo;d like to make the biggest cluster - i.e. the most popular recipe, which doesn\u0026rsquo;t use baking powder. Here\u0026rsquo;s that recipe:\n   Ingredient Amount Variation Rel. Freq.     baking soda 7\u0026frasl;8 tsp ± 3\u0026frasl;8 97   brown sugar 3\u0026frasl;4 cup ± 1\u0026frasl;4 91   butter 3\u0026frasl;4 cup ± 3\u0026frasl;8 99   chocolate 1 3\u0026frasl;8 cup ± 5\u0026frasl;8 105   eggs 2 whole ± 1\u0026frasl;2 103   flour 2 cup ± 1\u0026frasl;2 96   salt 5\u0026frasl;8 tsp ± 3\u0026frasl;8 89   sugar 1\u0026frasl;2 cup ± 1\u0026frasl;4 94   vanilla 1 1\u0026frasl;4 tsp ± 2 1\u0026frasl;8 98    In this case the flour seems a lot more reasonable too (2 cups). I\u0026rsquo;d be interested in trying this recipe, instead.\nIf you\u0026rsquo;d like to generate your own average recipes, check out the source on Github.\n","permalink":"/average-cookies/","tags":["food","coding"],"title":"Average chocolate chip cookies"},{"categories":null,"contents":" Sometimes when I want a recipe to cook something new I will find several recipes for the same thing and try to use them as a guide to generate an average or \u0026ldquo;consensus\u0026rdquo; recipe. This code should make it easy to generate consensus recipes (useful!) and also show variation between recipes (interesting!).\nFinding a consensus recipe requires first clustering many recipes. This is because a single recipe (e.g. a recipe for brownies) might have many significant variations (e.g. brownies can have just cocoa, just chocolate, or both). This code will first cluster recipes and then use the clusters to deliver the consensus recipe.\nExample The quick-and-dirty implementation goes like this:\n Choose a recipe (e.g. brownies, crepes, pancakes). Search using duckduckgo.com to find hundreds of corresponding recipes (fetch_urls.js). Download all the recipes and use pandoc to convert to text for processing. Use a really simple (read: bad) context-extractor to grab ingredients. Cluster the recipes based on the presence of ingredients. Take the median values for ingredients in a given cluster to create an average recipe.  The context-extractor works by finding the most likely \u0026ldquo;ingredient\u0026rdquo; section in the web page and then trying to parse those ingredients using a greedy search from a list of likely ingredients (top_5k.txt). Its not a great implementation. However, the errors in it are pretty random, which means you can get okay results as long as you have ~hundreds of recipes.\nThe median values are used, rather than the mean, so its less susceptible to bad parsing of the quantity. Again, as long as the parser is okay, it should be accurate enough.\nHere\u0026rsquo;s some examples of running the code (check out the code on Github).\nBrownies As mentioned, brownies are sometimes made with cocoa, sometimes chocolate, and sometimes both. Interestingly the machine learning automatically detects this.\nHere\u0026rsquo;s the biggest \u0026ldquo;brownie\u0026rdquo; cluster which shows ingredients for a consensus recipe made with chocolate (made up of 44 recipes). The Rel. Freq. corresponds to the percentage of recipes that contain that ingredient.\ncluster 0 (n=44) +------------+-------------+------------+ | Ingredient | Amount | Rel. Freq. | +------------+-------------+------------+ | butter | 4 1/2 tbsp | 98 | | chocolate | 4 1/2 tbsp | 93 | | eggs | 1 5/8 whole | 93 | | flour | 6 3/4 tbsp | 80 | | salt | 1/4 tsp | 50 | | sugar | 3/4 cup | 91 | | vanilla | 1/2 tsp | 70 | +------------+-------------+------------+  The next biggest cluster shows ingredients for a brownie recipe that is made with cocoa powder. (Also it uses baking powder unlike the previous recipe).\ncluster 11 (n=28) +---------------+------------+------------+ | Ingredient | Amount | Rel. Freq. | +---------------+------------+------------+ | baking powder | 1/4 tsp | 86 | | cocoa | 3 1/4 tbsp | 71 | | eggs | 1.0 whole | 57 | | flour | 5.0 tbsp | 93 | | salt | 1/4 tsp | 79 | | sugar | 7 1/4 tbsp | 93 | | vanilla | 1/4 tsp | 68 | +---------------+------------+------------+  The third biggest cluster shows ingredients for a brownie recipe that uses both chocolate and cocoa.\ncluster 4 (n=28) +-------------+-------------+------------+ | Ingredient | Amount | Rel. Freq. | +-------------+-------------+------------+ | brown sugar | 6.0 tbsp | 100 | | butter | 6 3/4 tbsp | 100 | | chocolate | 6 1/2 tbsp | 89 | | cocoa | 5 3/4 tbsp | 54 | | eggs | 1 7/8 whole | 104 | | flour | 1/2 cup | 89 | | salt | 3/8 tsp | 86 | | sugar | 1/2 cup | 100 | | vanilla | 3/8 tsp | 100 | +-------------+-------------+------------+  You may notice that the proportions are odd (1 7/8 eggs!) which is because the program tries to normalize the recipes to a specified volume, and then converts them back to the median volume in all the recipe cluster.\nPancakes The machine learning clustering highlights the major difference between pancakes - whether they are buttermilk or not. These are the first two biggest clusters, where the first one has milk and the second uses buttermilk.\ncluster 15 (n=33) +---------------+-------------+------------+ | Ingredient | Amount | Rel. Freq. | +---------------+-------------+------------+ | baking powder | 1/8 tsp | 100 | | butter | 1/2 tsp | 103 | | eggs | 1 1/4 whole | 97 | | flour | 1 1/4 cup | 100 | | milk | 1 1/8 cup | 94 | | salt | 1/2 tsp | 94 | | sugar | 1 1/2 tsp | 100 | +---------------+-------------+------------+  cluster 14 (n=29) +---------------+-------------+------------+ | Ingredient | Amount | Rel. Freq. | +---------------+-------------+------------+ | baking powder | 5/8 tsp | 100 | | baking soda | 1/2 tsp | 97 | | butter | 1/2 tsp | 100 | | buttermilk | 1 1/4 cup | 97 | | eggs | 1 1/8 whole | 97 | | flour | 1 1/8 cup | 100 | | salt | 3/8 tsp | 90 | | sugar | 1 1/4 tsp | 103 | | vanilla | 5/8 tsp | 41 | +---------------+-------------+------------+  Homemade noodles The machine learning clustering picks up on an important distinction within noodle making - whether to use semolina or flour.\ncluster 18 (n=24) +------------+-------------+------------+ | Ingredient | Amount | Rel. Freq. | +------------+-------------+------------+ | eggs | 2 1/2 whole | 83 | | flour | 2 3/8 cup | 129 | | salt | 5/8 tsp | 75 | | water | 6 3/8 tbsp | 100 | +------------+-------------+------------+  cluster 14 (n=16) +------------+------------+------------+ | Ingredient | Amount | Rel. Freq. | +------------+------------+------------+ | eggs | 2.0 whole | 112 | | flour | 1 3/8 cup | 119 | | olive oil | 2 7/8 tsp | 94 | | salt | 5/8 tsp | 75 | | semolina | 1.0 cup | 31 | | water | 3 7/8 tbsp | 75 | +------------+------------+------------+  Hamburger Here\u0026rsquo;s a funny thing. If you are not too specific about the recipe you want, you might get clusters of truly different recipes. Consider the hamburger.\nThe biggest cluster for hamburger is obviously a list of ingredients for a hamburger recipe albeit the proportions are off (you can just multiple the amounts by some factor).\n+----------------------+------------+------------+ | Ingredient | Amount | Rel. Freq. | +----------------------+------------+------------+ | beef | 3 5/8 tbsp | 87 | | eggs | 3/8 whole | 33 | | garlic | 6 1/2 tbsp | 77 | | onion | 4 1/8 tbsp | 50 | | salt | 1/4 tsp | 40 | | worcestershire sauce | 1.0 tsp | 47 | +----------------------+------------+------------+  Interestingly, one of the next biggest clusters is not a hamburger - it has no meat in it! Looking at it closer though it is obviously a hamburger bun recipe, which the machine learning clustering automatically detected. Lol.\n+------------+-----------+------------+ | Ingredient | Amount | Rel. Freq. | +------------+-----------+------------+ | butter | 1.0 tsp | 53 | | eggs | 7/8 whole | 79 | | flour | 2 3/8 cup | 95 | | milk | 3/4 cup | 37 | | salt | 7/8 tsp | 74 | | sugar | 3 1/8 tsp | 95 | | water | 5/8 cup | 79 | | yeast | 5/8 tsp | 79 | +------------+-----------+------------+  Try it Check it out on Github to try it yourself.\n","permalink":"/consensus-cookery/","tags":["coding","food"],"title":"Consensus cookery"},{"categories":null,"contents":" There is a new version of FIND now, called \u0026ldquo;FIND3.\u0026rdquo; Its public on Github now.\nFIND is the Framework for Internal Navigation and Discovery. It is basically an indoor GPS for your house or business, using only a simple smartphone or laptop.\nThis is an idea I started thinking about 8 years ago and wrote the first code in PHP almost four years ago, dubbed version 0, as a proof-of-concept. Two years later the project was re-written in Python. Then it was re-written in Go and called \u0026ldquo;FIND\u0026rdquo;. It\u0026rsquo;s been ported again to Python and called \u0026ldquo;whereami\u0026rdquo;. Now its been re-written one more time and called \u0026ldquo;FIND3\u0026rdquo;, with better speed, efficiency and new features.\nBefore getting to the benefits of the new version, I\u0026rsquo;d like to highlight what FIND can be used for. My main use case is home automation, and I\u0026rsquo;ve provided tutorials to get started with Home Assistant and OpenHAB. In my home automation setup I use FIND to turn on/off lights as I walk around the house. In the future I\u0026rsquo;d like to use FIND for more wayfinding in hospitals and hard to navigate locations.\nIts been amazing that in the past few years to hear how other people are using FIND. Folks are using FIND to relay exhibit information in museums, as a safety monitor system for employees working alone, tracking number of attendees in a music festival, monitoring the location of pets, wayfinding in airports. I\u0026rsquo;m hoping the new version will better support all these use cases and maybe more!\nThe new version of FIND has been written with longevity and flexibility in mind. There are notable improvements from the previous version:\n Passive scanning built-in (previously required a separate server, find-lf). FIND3 app and command-line tool support Bluetooth scanning (previously just WiFi). Meta-learning with 10 different machine learning classifiers (previously just three). Client uses Websockets which reduces bandwidth . Rolling compression of MAC addresses for much smaller on-disk databases. Data storage in SQLite-database (previously it was BoltDB). The API for sending fingerprints (/track and /learn) and MQTT endpoints are backward compatible. Uses the MIT license (instead of incompatible AGPL)  Getting started There are couple of ways you can get started with the new version.\nThe easiest way to get started is by tracking your phone. Next, you could try tracking your computer. If you have a couple of Raspberry Pi\u0026rsquo;s laying around, you can try the more advanced passive tracking which allows monitoring all nearby bluetooth and WiFi devices.\nIf you run into a problem with FIND, don\u0026rsquo;t hesitate to make a bug report. For quick help, join the Slack channel and someone there will help you (maybe me!). You can also contact me directly at zack dot scholl at gmail dot com.\n","permalink":"/find3/","tags":["coding","golang"],"title":"FIND3"},{"categories":null,"contents":"In 2017, I wrote 17 programs. Some or neat tools, some are playthings, and some are libraries for Go.\n howmanypeoplearearound (2,967 stars) Count the number of people around you 👨 ‍ 👨 ‍ 👦 by monitoring wifi signals 🛰. PIanoAI (233 stars) Realtime piano learning and accompaniment from a Pi-powered AI 🎹. progressbar (215 stars) A really basic thread-safe progressbar for Golang applications. croc (207 stars) Easily get things from one computer to another 🐊. closestmatch (140 stars) Golang library for fuzzy matching within a set of strings 📃. pluck (134 stars) Pluck text in a fast and intuitive way 🐓. playlistfromsong (108 stars) Create an offline music playlist from a single song :notes:. linkcrawler (105 stars) Cross-platform persistent and distributed web crawler 🔗. jsonstore (76 stars) Simple thread-safe in-memory JSON key-store with persistent backend. cowyodel (31 stars) Easily move things between computers with a code phrase and https://cowyo.com 🐄 💬. markdown2tufte (24 stars) Process markdown into a nice Tufte-like website :book:. crawdad (19 stars) Cross-platform persistent and distributed web crawler 🦀. boltdb-server (15 stars) Fancy server and Go package for connecting to BoltDB databases. readable (11 stars) Making web pages readable in a browser and in the command line 🔗 :book:. onetwothree (8 stars) A responsive minimalist theme for Hugo that is simple as 1, 2, 3. makemydrivefun (5 stars) Source code for https://makemydrive.fun. urlss (4 stars) URL shortening service.  ","permalink":"/code-i-wrote/","tags":["coding"],"title":"Code I wrote"},{"categories":null,"contents":" Sarcasm is the native language of the Internet. Unfortunately, since sarcasm is a close friend to cynicism, this can make the Internet a negative and disillusioning place. I decided to make an effort to make a place on the Internet that is more positive and reflective. This place would be where you can present your own story, anonymously and sincerely. The result was initially called \u0026ldquo;Stories, Incognito\u0026rdquo; but I later decided on the name \u0026ldquo;anonfiction\u0026rdquo; (i.e. anonymous + nonfiction), which is now live at www.anonfiction.com. You can submit your story right now, if you\u0026rsquo;d like! For a limited time, I will even pay you $1 for a good story (see promo for more info).\nI chose to give anonfiction a magazine format instead of resorting to a stream (or firehose) of content like in other social media platforms. In a lot of ways, the mission of anonfiction is similar to other Internet magazines like The Sun\u0026rsquo;s Reader\u0026rsquo;s Write, Brevity Magazine, Creative Nonfiction Magazine, 100 Word Stories, 1966 Journal, Concis, Proximity Magazine, Spartan Literature, and Thread Literary - all magazine that try to feature lesser known works of literary writing. However, unlike these magazines, anonfiction is devoted to publishing great nonfiction, with a focus on anonymity. This hopefully will level the playing field for MFAs and ordinary folks to contribute their stories.\nHow it works Anyone can contribute to anonfiction. You can write a story online or email a story to stories@anonfiction.com. If you write online you can log in to keep track of your stories. Contributed stories will be curated by editors who publish them after a brief grammar-correction and anonymization. \u0026ldquo;Curated\u0026rdquo; here means that stories that are blatantly spam will be removed, but otherwise all stories will be accepted regardless of opinions, point-of-view, brevity, or length of story.\nAnyone can also comment on stories. However, the commenting process is the exact same as the story submission process. That is, comments will be collected for each topic and presented as their own topic at the end of each month. Each comment will be anonymized and grammar-corrected, and additionally it will be removed if it is clearly offensive.\nAnyone can also be an editor at anonfiction. To do so, just send an email to editors@anonfiction.com. At first we can correspond by email, and then after a brief period you will be added to the list of admins for the site.\nTechnical aspects The web is inherently open-source (hit Ctl+U to see this page\u0026rsquo;s source in Firefox). In line with this, anonfiction is also open-source. It is basically a CMS, like Wordpress, with some authentication. The code lives at github.com/schollz/anonfiction and is licensed under MIT. It is written in Go and the web uses the Tachyon CSS framework. I\u0026rsquo;m happy to help with questions about it.\nI hope to hear your story sometime!\n","permalink":"/anonfiction/","tags":["thoughts","coding"],"title":"Anonymous nonfiction"},{"categories":null,"contents":"I\u0026rsquo;ve spent days sitting in a dark room looking into a microscope. Lots of the time I listen to music, but I\u0026rsquo;ve started to listen to podcasts. I\u0026rsquo;ve found a lot of great podcasts out there. I think my number one category of podcast is “the podcast about the small things.” Its always a welcome relief from the mainstream media which focuses more on the hyperbole of small things. I do like some news, but I\u0026rsquo;ve found some great podcasts that pitch the news in a more informal and friendly way. These are my favorite podcasts discovered this year, I hope I continue to discover new ones.\nThe basic premise of the podcast about the small things is always to find some small thing that no one thinks about and talk about it for 20-30 minutes and often interview the main players involved in the production of the Small Things. I think the major bastion of this type of podcast is 99% invisible, which is devoted to illuminating \u0026ldquo;all the thought that goes into the things we don’t think about.\u0026rdquo;\nThere seems to be a cottage industry for these types of podcasts, and I love them all. There is Every Little Thing which is \u0026ldquo;a show about the small stuff.\u0026rdquo; There is Revisionist History which is Malcom Gladwell\u0026rsquo;s show about \u0026ldquo;Something overlooked. Something misunderstood.\u0026rdquo; but mostly its just small things that Mr. Gladwell finds fascinating. There is Undiscovered which is a podcast \u0026ldquo;about the all the stuff that gets left out of journal articles,\u0026rdquo; and while nominally science-based it often seeks out big stories from small things. There is Twenty Thousand Hertz which is more sound-based but still aims to fill the divide because \u0026ldquo;you may not think about the sounds you hear every day.\u0026rdquo; There is Invisibilia which \u0026ldquo;is about the invisiable forces that control human behavior\u0026rdquo; and then there is Surprisingly Awesome which attempts to find fascination in the world even though \u0026ldquo;lots of things in the world seem ordinary.\u0026rdquo; For a more food-related one there is The Fridge Light which looks at \u0026ldquo;the hidden stories of the things we eat.\u0026rdquo; Another food one is Why We Eat What We Eat which \u0026ldquo;investigates the unseen forces that shape our eatings habits.\u0026ldquo; Though its not around anymore, I loved listening to Mystery Show that simply \u0026ldquo;solves a minor mystery which cannot be solved with search engines.\u0026rdquo;\nMy other favorite podcasts are the news ones that are toned as if you were having a beer with the podcasters. They still relay information, but in a way that is so informal you barely realize that they are relaying some information that they spent their week learning. For politics, there is NPR politics and often (nowadays) This American Life, for art there is A Piece of Work, for science there is Science Vs., and for music there is All Songs Considered and for culture there is Pop Culture Happy Hour. I love these podcasts, but I have to pace myself with them because the constant loose informality of the tone can become disingenuous and grating after awhile.\nI have some favorite podcasts that are just funny or amusing to me, and not entirely educational. These would include Why oh why which accounts for dating in the real world (though sometimes fictionally). Another great one is Beautiful Anonymous which is sometimes about dating, but it is mostly about the real world. Then there is just the improve humor of My Brother My Brother and Me which I enjoy just to hear people crack themselves up.\n","permalink":"/podcasts-2017/","tags":["thoughts"],"title":"Podcasts I heard"},{"categories":null,"contents":" I\u0026rsquo;ve read about 15 books this year - not as many as I\u0026rsquo;d like (I read 40 in college), but I did a lot of magazine reading too (e.g. The Sun and The New Yorker). The books that I read can be classified into three major categories: non-fictional animal encounters, magical horror realism and fictional non-fiction.\nThe first main category are books I read in 2017 are about non-fictional animal encounters. My favorite book in this category, and of 2017 overall, is Illumination in the Flat-woods by Joe Hutto. Its the real-like story of an experiment to raise turkey\u0026rsquo;s through their entire life. I never knew how amazing turkeys were until I read this book. There is a movie by the same name that also is amazing, as they were able to recapitulate a lot which occurred in the book (i.e. replicating the experiment). I can say, for sure, that I think turkeys are amazing now. I will still eat turkey, but now with a reverence I never had before.\nI started out the year reading What a Fish Knows by Jonathan Balcombe. I didn\u0026rsquo;t quite finish this book - the first chapters a good but it turns into a bit of a direct plea to save the fish instead of an account of how amazing they are. An animal book shouldn\u0026rsquo;t need to make a direct plea - the book should show enough how amazing the animals are and the reader can decide for themselves, and its a hard decision to make if you learn how awesome some of these animals are.\nAnother good example of animal writing is Last Chance to See by Douglas Adams is an interesting investigation of animals near extinction, circa 1985. A lot of the animals in the book have since recovered, except the Baiji dolphin, unfortunately. Despite the severe topic, its a funny and entertaining book. Adams is a funny person and he gives some levity to some of the dark topics. He is also a great everyman in the book who has lots of things explained to him in a simple way - so its easy to pick up information.\nI\u0026rsquo;ve been going out to see Bison every week now. I live in Edmonton, so I\u0026rsquo;m not far from Elk Island where there is a ton of wildish bison roaming around. I\u0026rsquo;ve literally run into them on the trail. Anyways, they are quite impressive animals, and I wanted to learn more about them. I found a great book, American Bison by Steven Rinella, which goes into their history. A lot of the focus is on hunting, but hunting in a humane way which is really interesting to learn about. Its a very respectful book about the bison with lots of great information.\nThe next major category of book that I really enjoyed are books about magical horror realism. I didn\u0026rsquo;t realize this was a genre, but once I found it I realized it was something that I really enjoyed. Library at Mount Char by Scott Hawkins is my second-favorite book of 2017. The premise is bizarre, but the books twists in a much more bizarre way than imaginable. This book is to fantasy what The Matrix is to science fiction.\nAnother thrilling book I read was Weaveworld by Clive Barker, an epic tale that goes back and forth between reality and fantasy until they merge at the end. Great read. I actually found the previous book after reading this book and trying to find another book that matched it, to which I wrote an entire program which ended up becoming a website for people: booksuggestions.ninja.\nThe third major category that I greatly enjoyed is of ficiontal non-fiction. The first book I read of 2017 was Pieces of the Left Hand by J. Robert Lennon and it is a little work of genius. They are a collection of very, very short tales of a seemingly non-fictional account of the author\u0026rsquo;s life. The stories of very mundane things - stories about the locals smashing mailboxes and dinner parties. Except they inexplicably almost always take a weird and unbelievable end.\nI have a soft spot for nonconformist writers like Bukowski and Hunter Thompson. I found Gonzo Girl by Cheryl Della Pietra to be an extraordinary fictional account of an assistant to Hunter Thompson. A lot of it delves into tropes about genius (drug addition is a trope that it seems to try to destroy) and sexism (which the author herself constantly proclaims and then falls right into). Still, the writing is very good.\nImaginary Imagnitude by Stainslaw Lem is a wholly amazing book - from the philosophy of a self-aware computer system to the prologues of books that have never existed (like a book about bacteria that communicate). A lot of the Polish wordplay is lost in English, but it is still funny nevertheless.\nTowards the end of the year I read The Three-Body Problem by Liu Cixin which I saw was recommended by former president Barack Obama. It gladdens my heart that this book in particular was recommended by Obama - its about the looming destruction of Earth by an Alien race which undermines humans by attempting to destroy their progress in basic science. The importance of basic science in this book makes me think that Obama may have had similar sentiments. Anways, the book is great - its translated well from Chinese and has lots of great information about the Chinese revolution and communism. The science explainations are not bad either.\nEpistemological articles One author has been sticking out to me this year - Kathryn Schultz. Whenever I read her articles I instantly realize its her - she has an amazing knack for taking any kind of thesis and detailing a complete and thoughtful story around it. She seems to like to take strange thesis too. The first one I read was on Henry Thoreau as a hypocrite (of which I totally disagree but love the writing). My favorite from this year were How to be a know-it-all which posits that its easy to learn a little bit about everything and Fantastic beasts and how to rank them which tries to understand why its possible to make judgements about things that don\u0026rsquo;t exist.\nOther books  Calculating God by Robert J. Sawyer (not finished) Hard Magic by Larry Correia Death Comes for the Archbishop by Willa Cather (not finished) Everyone\u0026rsquo;s An Aliebn when you\u0026rsquo;re an Aliebn Too by Jomny Sun Jack Reacher 61 hours by Lee Child True Grit by Charles Portis Leven Thumps and the Gateway to Foo by Obert Skye Annihilation by Jeff Vandermeer  ","permalink":"/books-2017/","tags":["thoughts","books"],"title":"Books I read"},{"categories":null,"contents":" Computers can do many amazing things with art, especially with the advent of neural networks1. In 2016, I saw some computer-generated art that inspired me to generate art as a human. The art I saw was a rendition of photos in primitives. Here\u0026rsquo;s an example (For much more, just follow @primitivepic):\n\nThese kinds of photos were generated using a computer program that tries to replicate a photo by slowly building up primitive shapes (ellipses, rectangles, triangles) of a single color until eventually enough different shapes and colors converge on the original image. The program is available for free at github.com/fogleman/primitive.\nI played around with this program and soon found myself inspired and wanting to learn acrylic painting to paint in that style. I\u0026rsquo;ve never painted in acrylic before (previously I\u0026rsquo;ve done only watercolor / gouache), but I thought I could learn do better than this computer program. So, in September 2016, I sought to become an artist using this computer program as the teacher.\nI started out trying to take a photo and paint primitives. The photo I chose was of a bison.\nI plugged this photo into the program and generated about 100 images that each added a single rectangle onto a base image. This was my guide, and all I had to do was follow the painting procedure from looking at the next image.\nMy first painting follows exactly the primitive style using only rectangles. It remains one of my favorites though it is quite amateur. I misjudged a lot of the colors so everything became a lot brighter. I still struggle with creating subtle colors today, too.\nMoving towards to realism I continued painting throughout the end of 2016 and now into 2017. I\u0026rsquo;ve been painting mostly animals and lots of bison for some reason. One of my New Year Resolutions was to paint every week. I have been able to do that, mostly.\nI learned a lot painting every week. I followed the advice of Jessie Doyle and learned to paint what I see instead of trying to paint what I think I see. I took a class with Frank Haddock and learned about how to subdue colors (just consider RGB and remove the current color and mix the remaining with white to make a subduing version) and how to use brushes (use filbert for lines).\nI became enamored with the wet-on-wet acrylic because you could get blends of color and strokes. I also found that the primitives were too mechanical to get colors and I experimented with something more realistic.\nBack to primitives Now, at the end of 2017, I\u0026rsquo;ve gone back to the using primitives, but without the restrictions on a particular shape of stroke. Instead, I focus on generating the painting in a few explicit strokes with a wide brush.\nThere is something wonderful about rendering the painting in a few strokes, in a primitive style. In principle it is simple - there are only a few strokes involved. However in practice it is complex - each stroke needs a color, a position and an orientation. There are many combinations for those three options and they have widely different aesthetic appeals. Suddenly determining the next stroke becomes difficult and possibly frusturating. However, I find the result quite appealing.\nUsing the idea of primitives and improving upon my ability to draw and paint, I\u0026rsquo;m now able to generate an acrylic painting that is much more satisfying to me in terms of primitives. For the record, I can also paint things other than bison, like birds2 3.\nYou\u0026rsquo;ve read to the end of this! Wow. As a bonus, here are two painting tips that I would share as a still progressing novice:\n A nice trick I\u0026rsquo;ve found is to start with a red canvas because it gives a great boldness to the underlying strokes that you don\u0026rsquo;t get with a white canvas. A lot of painting is overcoming frustration. Almost every painting here became extremely frustrating and infuriating to me at some point, but I was always able to work through and eventually like and love the result.   For some neat examples about neural networks and art, check out my previous blog post. [return] [return] [return]   ","permalink":"/painting-primitives/","tags":["painting"],"title":"Painting from computer-generated primitives"},{"categories":null,"contents":"https://play.golang.org/p/OVkruYsBVV\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;text/template\u0026#34; ) type View struct { Title string Content string } func main() { header := ` {{define \u0026#34;header\u0026#34;}}\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ $.Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; {{end}}` page := ` This line should not show {{define \u0026#34;indexPage\u0026#34;}}\u0026lt;html\u0026gt; {{template \u0026#34;header\u0026#34; .}}\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Content }}\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; {{end}}` view := View{Title: \u0026#34;some title\u0026#34;, Content: \u0026#34;some content\u0026#34;} // Here we try to set which page to view as content  t := template.New(\u0026#34;basic\u0026#34;) t = template.Must(t.Parse(header)) t = template.Must(t.Parse(page)) var tpl bytes.Buffer err := t.ExecuteTemplate(\u0026amp;tpl, \u0026#34;indexPage\u0026#34;, view) if err != nil { log.Println(\u0026#34;executing template:\u0026#34;, err) } fmt.Println(tpl.String()) }","permalink":"/golang-nested-templates/","tags":["coding","golang"],"title":"How to easily make nested templates (Go)"},{"categories":null,"contents":" Being the \u0026ldquo;odd one out\u0026rdquo; means that you differ from all other people in some way. Its pretty easy to feel like the the odd one out in your family. Lots of families might have the one child who is left-handed, or the father who converted to Christianity. Its also easy to feel like the odd one out in your community. You might be known as the math teacher that climbs mountains or the guy that rollerblades without a shirt while playing guitar. But, really, we are all the odd one out, and it doesn\u0026rsquo;t take long to find out how.\nAs of 2016, the population of the earth is 7.442 billion people. If you ask any one person a divisive question, then, by definition, half of the population would say one answer, while half would say another. Ask each half another question and you can divide them even further. To be the odd one out, you only need to ask enough questions to divide the full population of the earth down to one person. One person that is different than everyone else.\nA divisive question makes 50% of people answer one way and 50% the other. The probability that number of people that answer each question the exact same way is 50% multiplied by 50%, for each question, times the total population. How many questions do we need so that the likelihood that any two people have the same answers is less than 1%? This is simply answered by determining the exponent, n, to a binomial distribution,\nThe first number, n, that satisfies this equation is 36. That means you only need 36 questions before the answers to those questions uniquely identify that person as the odd one out, and it guarantees (with 99% confidence) that no other person has answered the same as you. Here\u0026rsquo;s my 36 questions, and their answers, which makes me the odd one out. If you are able to answer all these questions too, then you will find out exactly how you are the odd one out.\n36 Questions of Uniqueness  Can you draw? Yes. Can you play a musical instrument? Yes. Can you whistle? Yes. Dogs or cats? Cats. Do you write poetry? Yes. Do you like to dance? Yes. What hand do you write with? The left. Can you swim? Yes. Can you cook? Yes. Do you like math? Yes. Do you like sports? No. Do you read every day? Yes. Do you watch TV? No. Are you religious? Yes. Are you married? No. Are you overweight? No. Do you sometimes sleep naked? Yes. Do you save your money? Yes. Do you have brown eyes? No. Do you use ever use cash? Yes. Are you under 30? Yes. Are you a man or a woman? A man. Did you go to college? Yes. Can you change a flat tire? Yes. Do you wear contacts/glasses? Yes. Do you own a pet? No. Have you ever flown in an airplane? Yes. Do you read the news? Yes. Do you speak more than one language? Yes. Can you drive a car with a manual transmission? Yes. Do you listen to classical music? Yes. Do you floss your teeth every day? Yes. Do you commute to work by car? No. Have you seen snow? Yes. Are you vegetarian? No. Can you sew? Yes.  If the math is right, and the assumptions are right, then you will never find another person that has answered the same way as I have. If you answer the questions, there is basically a zero chance that you will answer the same that I have and only a less-than-1% change than anyone on earth will answer the same I have. We are all the odd one out.\nShort-list of rare questions If you consider questions that only 0.1-1% of the population can say yes to, then you need much fewer questions than you would normally need. In fact, for this you only need to answer yes to six of these rare questions and then you will be uniquely defined on Earth.\nRare Questions  Are you transgender? Do you have a PhD? Have you run a marathon? Can you speak more than four languages? Are you religous but not adherent to christianity, islam, hinduism, or buddhism? Have you served in the army? Do you have green eyes? Do you have a healthy life style (no smoking, exercising 3 hours a week, body fat under 20%)? Are you famous?  You may notice that some questions are omitted which are also considered \u0026ldquo;rare.\u0026rdquo; The rare questions I selected here pertain to the positive aspects of one\u0026rsquo;s life, instead of the negative aspects. These positive aspects are basically aspects of your life that you would be more likely to share with someone else rather than just share with your doctor. Also, it is better to define yourself by your positive aspects than by your negative aspects.\n","permalink":"/odd-one-out/","tags":["thoughts"],"title":"Odd one out"},{"categories":null,"contents":"I\u0026rsquo;ve mentioned how to send a file with IPFS and also how to send a file with an assortment of modern techniques. Here\u0026rsquo;s yet another method to send a file. It\u0026rsquo;s only a line of bash, and you can get a nice progress bar and upload to any server that is listening on a certain TCP port.\nOn the server computer, server.com, that is receiving the file, just do:\nnetcat -l -p 6000 \u0026gt; somefile  On the other computer that is sending the file just do:\ncat somefile | pv | netcat server.com 6000  ","permalink":"/send-with-netcat/","tags":["coding"],"title":"Send a file with netcat"},{"categories":null,"contents":"I had a bad habit of leaving everything in my Downloads folder, and never clearing anything out. I might need it, assume, at some point. However, this is never true. To get myself out of this \u0026ldquo;I might need it*\u0026rdquo; mindset, I started deleting my Downloads/ folder every time I start my computer. This way, I had to remember, that anything I put in there would disappear when I turned my computer off. This was easy to do with one line in crontab -e,\n@reboot /bin/rm -rf /home/zns/Downloads/*  However there is even a better way. You can mount the Downloads directory directly to RAM! That, not only will it automatically purge itself when your computer turns off, it should also run faster! You can easily do this with tmpfs, just add this line to your /etc/fstab:\ntmpfs /home/zns/Downloads tmpfs defaults,noatime,mode=1777 0 0  ","permalink":"/just-ram/","tags":["coding"],"title":"Look ma, no hard disk"},{"categories":null,"contents":" My good friend Jessie and I want to watch a documentary movie on turkeys together.1 I have the file on my computer and she does not, so I want to send this file to her directly2 from my computer. There are a couple of restrictions though:\n the turkey documentary is a ~1 GB file Jessie lives 2,000 miles away in a different country Jessie uses Windows OS Jessie is not a programmer, and avoids anything that involves running something on the command-line  How should I send the movie, in the fastest possible way, so we can start learning about turkeys together?3 Even though its 2017, the method I use to send a file from my computer to someone else\u0026rsquo;s computer will depend greatly on who that someone is and how comfortable they are with computers. Here\u0026rsquo;s a table I made of the methods I tried with a brief description of what I would do to send the file (with my reaction) and what Jessie does to receive the file (and her reaction).\n   Method What I do What Jessie does     mail   mail a USB drive   plug in USB drive    scp   run scp   determine local IP, log-in to router and forward port 22, start SSH server, generate guest account and send password    personal server   setup port-forwarding, download a server and a reverse proxy   click a link    IPFS   install IPFS, pin file, warm up cache   click a link    WebTorrent   drag-and-drop file   click a link (hopefully)    wormhole   apt-get Python2 ecosystem   install Python ecosystem and Visual C++    croc   run croc   download croc and double-click     Read the following for a more in-depth description of the methods. Basically after investigating a lot of the techniques I ended up making my own.4\nMail I could mail Jessie a USB with the file. I\u0026rsquo;d have to buy a USB stick, even though I might get it back, its about $4. For a cross-country letter I would have to buy a stamp for $1.20. Also international postage is quite slow, so it would typically take about 10 days to reach her. Since I could recuperate the USB stick cost, sending ~1 gigabyte is basically a flat rate of $1.20, but with a transfer rate is about 0.002 MB/s. Though, the benefit here is that neither of us need to have a server, or know what port-forwarding or reverse proxies or DNSs are. One drawback is that this is not encrypted, although their the breaking of federal crimes would help to de-incentavize interfering with the transfer.\nscp I use scp for almost everything, since I\u0026rsquo;ve got all my computers networked toegether. However, even though it seems like its super easy to do, there is a bit of setup. You have to have an SSH server running and you have to setup port-forwarding and determine your public IP address. Now all of this can be done pretty easily. If I were telling someone I would say: download Cygwin and choose openssh for installation, run cygwin and do ifconfig to get your local IP, login to your router and forward port 22 to your local IP address, then goto icanhazip.com to get your public IP address and tell the other person your public address. But, to really be secure (and not share your personal password) you\u0026rsquo;d also have to share a SSH key with your friend. Well, I guess scp is not really great for sharing between friends afterall, but it is certainly great for personal use!\nPersonal server Since I do know what a server is and how to use it, there is a easy solution. I could upload the documentary to my DigitalOcean droplet, then host the file so she can download it. The nice thing about DigitalOcean now-a-days is that you can spin-up a new volume in about 2 minutes, mount it, and put a file on it for someone to download. A 3 GB volume (which will easily accommodate my ~1 GB) costs $0.30 per month.\nSo I spin up my volume, scp my file to my personal server and I host the file with something like Caddy. I send Jessie the link, I can let her download it. Once she downloads it I can go log-in to DigitalOcean and delete the volume. If Jessie downloads it in 24 hours it would only cost me exactly $0.01, which is a flat rate.\nThe transfer rate involves two steps. First I upload the file to DigitalOcean at 0.8 MB/s. Then Jessie downloads it at about 3.5 MB/s. Assuming Jessie downloads it the instant it is finished uploading (to minimize the time between steps to zero), the overall transfer rate is the harmonic mean of the two rates, about 0.7 MB/s.\nWebTorrent There are web browsers out there that let you store files temporarily. An example is send.firefox.com. This case would be very similar to the personal server solution, except you are limited to the bandwidths and quotas of the web browser (which is 1 gigabyte for send.firefox.com). The more modern approach is something like instant.io or file.pizza which both leverage the WebTorrent javascript protocols.\nThese sites let you directly send files from one peer to another. However, I noticed that both have problems with handling big files,5 which may be a browser issue that occurs (definitely an issue on Chrome). Also, speaking of browsers, I\u0026rsquo;d rather not rely on them to transfer my files (in fact the second time I tried file.pizza it gave me a 503 and instant.io was just unresponsive). These servers depend on too many undependables: people that host the servers, browsers that change too fast, too much under the hood to understand what is happening and whether data is saved or exposed or encrypted or what.\nIPFS Peer-to-peer technologies are very popular now, not just in the browser. The interplanetary file system (IPFS) creates a peer-to-peer hypermedia protocol for sharing files. Seem my previous post about sending a file with IPFS. The problem with IPFS is that it requires a long lookup for rare files, in the case of most files you might want to share. However, if you are sharing the file with multiple people the speeds will increase as there are some great caching mechanisms in place on the gateway. Because the peer-to-peer lookup depends on so many factors, the download may be a bit stochastic.\nwormhole It still turns out that there are solutions that work on the command-line. There is toss6 and there is the amazing wormhole package. Still, though, when I looked at wormhole I realized I would have to install it on Jessie\u0026rsquo;s computer. Normally that wouldn\u0026rsquo;t be a problem, except that Jessie uses Windows and the only thing Jessie knows about Python is that it is a snake. Also the installation for wormhole is not simple - it seems to require Visual C++, and very likely some Cygwin-ninjaing.\ncroc Here\u0026rsquo;s my shameless plug of a new tool I\u0026rsquo;ve been working on. Essentially it is the same as wormhole but it has no dependencies, you can just download it and run. It does encryption, too, and uses parallel TCP ports to transfer files as fast as possible (which is about as fast as all the other programs).\nThis solution ends up being ideal for Jessie and I because its simple for me (I just download and run with the file as a flag) and its simple for Jessie (she just downloads and run).\nFoot notes  The documentary is My Life as a Turkey which follows an actors real interactions with wild turkeys following methodology put in place through author Joe Hutto\u0026rsquo;s book Illumination in the Flatwoods. [return] By \u0026ldquo;directly\u0026rdquo; I mean generally without being stored on a server in the process of transferring. Things like email, Dropbox, Google Drive, OneDrive, etc. all have an intermediate server which stores your file before the other person can retrieve it. [return] For posterity\u0026rsquo;s sake here is the relevant XKCD. [return] Again, for posterity\u0026rsquo;s sake here is the relevant XKCD. [return] See instant.io issue #149 and file.pizza issue #73. [return] Though issues also persist for toss. [return]   ","permalink":"/sending-a-file/","tags":["coding"],"title":"Sending a file in 2017"},{"categories":null,"contents":" Sending a file with IPFS is fun (after all it is leveraging the peer-to-peer network and content-addressable blocks of data!) and easy.\nInstall IPFS Here is the basic instructions to install:\nwget https://dist.ipfs.io/go-ipfs/v0.4.11/go-ipfs_v0.4.11_linux-amd64.tar.gz tar -xvzf go-ipfs* cd go-ipfs sudo ./install.sh ipfs init ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/9001 ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001  The last two lines are useful for listening on LAN connected devices. The port 0.0.0.0 will let run the IPFS daemon on a different computer but still use the peer-to-peer portal from that computer.\nThen start the daemon with\nipfs daemon  You could also start the daemon with an init script.1\nLoad the file into IPFS Then add the file to IPFS. When you add the file to IPFS it copy the file to your IPFS repo (usually ~/.ipfs) and it will not touch the original file.\n$ ipfs add somefile added QmSr1saoM3n1Sx8dBs5bz7ozU somefile  Send it! Then tell your friend to download file using the IPFS hash from the output:\nwget https://ipfs.io/ipfs/QmSr1saoM3n1Sx8dBs5bz7ozU  This link does not require the user to have IPFS. It uses the public gateway, https://ipfs.io/ipfs/, which lookup peers from their main IPFS servers.\nCleanup (optional) Once your friend has the file, then you can remove the file from being hosted on IPFS (if you want). Even though you\u0026rsquo;ll still have the file in the original location, it will no longer be served from your IPFS daemon.\nipfs pin rm QmSr1saoM3n1Sx8dBs5bz7ozU ipfs repo gc  Note: after deletion your content may still be stored in the IPFS Gateway cache for some time (not sure how long).\n I made an init script here: https://gist.github.com/schollz/da71aa2a5a43d76739ef034331c7b0bb [return]   ","permalink":"/ipfs-transfer/","tags":["coding","ipfs"],"title":"Send a file with IPFS"},{"categories":null,"contents":" How long does a sentence have to be to gaurantee its uniqueness? This question can be answered by looking at a huge corpora of indexed sentences, e.g. the text of the internet. All that has been written on the internet is not nessecarily a million monkeys typing on a keyboard (although a million monkeys typing on a keyboard could produce all the current content),1 with exception of a website that generates random text.2 Still, I was wondering, out of the current 25 billion or so webpages3, how long does a sentence have to be to make it unique? Surprisingly short, as it turns out.\nA quick experiment Here\u0026rsquo;s a quick experiment to see how few words you need to actually produce a totally and completely unique sentence into the universe.\nLets take the sentence (which I\u0026rsquo;m making up as I type):\n A painting of a donkey in the desert.\n This sentence comes from a painting I made that I\u0026rsquo;m looking at. For searching \u0026ldquo;A\u0026rdquo; there are 25.3 billion results. The exact phrase \u0026ldquo;A painting\u0026rdquo; narrows it down to 22.4 million. Already we\u0026rsquo;ve decreased by a factor of 103. The phrase \u0026ldquo;A painting of\u0026rdquo; decreases it to 5.3 million (another 10~1 decrease) and adding \u0026ldquo;a donkey\u0026rdquo; decreases it to 131,000 (another 10~2 decrease). The smallest number of results is \u0026ldquo;a painting of a donkey in the\u0026rdquo; which yields only a single result (another 10~5 decrease).4 There are no results for \u0026ldquo;A painting of a donkey in the desert\u0026rdquo;, at least until this post is published.\nThis makes sense, as there are increasing combinatorial factors that limit the probability of a given sentence for each new word. Each word has many possibilities as there are hundreds of thousands of English words. Although, most of the words are not possible because there are requirements on grammar and context. We can very roughly approximate this by solving for the 7th root (since we only had seven words that gave us a few results) as the total number of sites (25 billion), which gives ~30. Although this number is inflated for the nouns and deflated for the prepositions.\nBut the size of this number, 30, gives pause to ever think that the internet will contain every possible sentence. Though the internet may contain most 6-7 word sentences, it would need 30x as many pages to have 8 word sentence. It would need ~900x more pages to have 9 word sentences, and so on exponentially.\nSo far now, it is really amusing and satisfying to relish in the thought that most 8 word sentences we create, are totally unique to the internet and have never existed before. And if we extrapolate a little bit, and say that the sum of total language ever spoken may be only a million times bigger than the internet, than that would mean that most 11 word sentences have never been uttered before!*\nTake these calculations with a big big big grain of salt, but since these numbers lie in the world of logarithms, they won\u0026rsquo;t be off my much more than an order of magnitude.\n See the infinite monkey theorem [return] See the Library of Babel .info [return] 25.3 billion is the estimate of web pages containing the letter \u0026ldquo;a\u0026rdquo; in a Google search. [return] At time of writing, the only website that contains \u0026ldquo;A painting of a donkey in the\u0026rdquo; is from a Yelp review (archived). [return]   ","permalink":"/sentences/","tags":["thoughts"],"title":"Most sentences are unique"},{"categories":null,"contents":" crawdad is a simple, yet powerful alternative for scraping in a distributed, persistent manner (backed by Redis). It can do simple things, like generating site maps. It can also do complicated things, like extracting all the quotes from every page on a quotes website (tutorial follows).\nInstall First get Docker which will be used for running Redis.\nThen you can simply download crawdad:\n$ wget https://github.com/schollz/crawdad/releases/download/v3.0.0/crawdad_3.0.0_linux_amd64.zip $ unzip crawdad*zip $ sudo mv crawdad*amd64 /usr/local/bin/crawdad Unlike many other scraping frameworks, crawdad is a single binary that has no dependencies.\nConfigure For scraping, crawdad requires creating a pluck configuration file. Here is the configuration file for scraping quotes.toscrape.com:\n pluck is a language-agnostic way of extracting structured data from text without HTML/CSS/Regex. Essentially pluck is configured in a way you would tell your friend to grab data.\nFor example, the first pluck unit describes how you would get the quote text from quotes.toscrape.com. Starting from the beginning of the source, you look for the string \u0026ldquo;span class=\u0026quot;text\u0026quot;\u0026rdquo; (called an activator). Once that is found, you look for a \u0026ldquo;\u0026gt;\u0026rdquo;, the next activator. Then you capture all the characters until a \u0026ldquo;\u0026lt;\u0026rdquo; is seen (the deactivator). This will allow you to collect all the quotes.\nEach of the pluck units will be found simultaneously and extracted from any HTML page crawled by crawdad.\nRun First, start Redis with Docker:\n$ docker run -d -p 6374:6379 redis and then start crawdad:\n$ time crawdad -p 6374 -set -u http://quotes.toscrape.com -pluck quotes.toml -include '/page/' -exclude '/tag/' 0.12s user 0.03s system 5% cpu 2.666 total  The -set flag tells the crawdad to create some new settings with a URL (-u) and a pluck configuration (-pluck) and with some inclusions/exclusions (-include/-exclude). The inclusions and exclusions ensures that only the /page links will be followed (in order to compare with scrapy).\nExtract data The data from crawdad can be parsed in the same as scrapy by first dumping it,\n$ crawdad -p 6374 -done done.json  The data, done.json, contains each URL as a key and the data it extracted. It needs to be quickly parsed, too, which can be done lickity-split in Python in 12 lines of code:\n crawdad bonuses crawdad has some other mighty benefits as well. Once initiated, you can run another crawdad on a different machine:\n$ crawdad -p 6374 -s X.X.X.X This will start crawling using the same parameters as the first crawdad, but will pull from the queue. Thus, you can easily make a distributed crawler.\nAlso, since it is backed by Redis, crawdad is resilient to interruptions and allows you to restart from the point that it was interrupted. Try it!\nComparison with scrapy Here I will compare scraping the same site, quotes.toscrape.com with crawdad (my creation) and scrapy (the popular framework for scraping).\nscrapy is powerful, but complicated. Lets follow the tutorial to get a baseline on how a scrapy should run.\nInstall First install scrapy by installing the dependencies (there are a lot of dependencies).\n$ sudo apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev $ sudo -H python3 -m pip install --upgrade scrapy Once you get it install you can check the version:\n$ scrapy -version Scrapy 1.4.0 - project: quotesbot Configure Actually, I will just use the tutorial of scrapy to skip building it myself.\n$ git clone https://github.com/scrapy/quotesbot.git $ cd quotesbot scrapy is not simple. It requires \u0026gt; 40 lines of Python code in several different files (items.py, pipelines.py, settings.py, spiders/toscrape-css.py).\nRun Lets run and time the result:\n$ time scrapy crawl toscrape-xpath -o quotes.json 1.06s user 0.08s system 29% cpu 3.877 total  scrapy is about 10-30% slower than crawdad, plus it can not easily be run in a distributed, persistent way.\n","permalink":"/crawdad/","tags":["coding","golang"],"title":"Using crawdad"},{"categories":null,"contents":"I\u0026rsquo;ve been working on readable, a simple bookmarklet for easily reading articles in the browser (Github). As part of this, I made a Docker image that utilizes Mozilla\u0026rsquo;s readability package.\nYou can easily use the Docker image to directly read articles from the command line.\nFirst pull it.\n$ docker pull schollz/readable  Then set a URL that contains a news article:\n$ URL=http://www.cnn.com/2017/10/03/world/nobel-physics-prize-2017/index.html Then read!\n$ docker run --rm -t schollz/readable $URL | more ---------------------------------------------------------- Nobel Prize in Physics goes to \u0026#39;black hole telescope\u0026#39; trio ---------------------------------------------------------- Story highlights - The development proves Einstein\u0026#39;s prediction of gravitational waves - More than 1,000 people worked on the technology over four decades (CNN)The 2017 Nobel Prize in Physics has been awarded to Rainer Weiss, Barry C. Barish and Kip S. Thorne for their detection of gravitational waves, a development scientists believe could give vital clues to the origins of the universe.","permalink":"/docker-news/","tags":["coding"],"title":"Read news in the terminal with Docker"},{"categories":null,"contents":"I like to caption my images and I like to write in Markdown. However, it is currently not possible to make captioned images, i.e. make an HTML figure using just Markdown - at least at the current spec (version 0.27) at the time of this writing. Of course, Markdown supports HTML, so you could just write a \u0026ldquo;\u0026lt;figure\u0026gt;\u0026rdquo; tag everywhere instead of writing with the Markdown \u0026ldquo;![]()\u0026rdquo; image syntax. However, I want to use the \u0026ldquo;![]()\u0026rdquo; syntax! So, here is a nice trick for captioning images using only the Markdown syntax with a little vanilla Javascript.\nThe trick is to use Javascript to find images with non-zero alt attributes and convert them to figures with the caption filled in with the content of the alt attribute. Someone came up with this before me, and here is their script:\n$(\u0026#34;.post-content img\u0026#34;).each( function() { if ($(this).attr(\u0026#34;alt\u0026#34;)) { $(this).wrap( \u0026#39;\u0026lt;figure class=\u0026#34;image\u0026#34;\u0026gt;\u0026lt;/figure\u0026gt;\u0026#39; ).after( \u0026#39;\u0026lt;figcaption\u0026gt;\u0026#39; + $(this).attr( \u0026#34;alt\u0026#34;) + \u0026#39;\u0026lt;/figcaption\u0026gt;\u0026#39; ); } }); // from https://blog.kchung.co/adding-image-captions-to-ghost/  It works great, but it requires JQuery. I don\u0026rsquo;t want to use JQuery so I carefully followed oneuijs/You-Dont-Need-jQuery and I was able to convert this to just plain Javascript:\nfunction ready(fn) { if (document.attachEvent ? document.readyState === \u0026#34;complete\u0026#34; : document.readyState !== \u0026#34;loading\u0026#34;) { var elements = document.querySelectorAll(\u0026#34;img\u0026#34;); Array.prototype.forEach.call(elements, function(el, i) { if (el.getAttribute(\u0026#34;alt\u0026#34;)) { const caption = document.createElement(\u0026#39;figcaption\u0026#39;); var node = document.createTextNode(el.getAttribute(\u0026#34;alt\u0026#34;)); caption.appendChild(node); const wrapper = document.createElement(\u0026#39;figure\u0026#39;); wrapper.className = \u0026#39;image\u0026#39;; el.parentNode.insertBefore(wrapper, el); el.parentNode.removeChild(el); wrapper.appendChild(el); wrapper.appendChild(caption); } }); } else { document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, fn); } } window.onload = ready;  Of course this looks a little more complicated, but it works just the same.\nThe only issue here is that when you load a page you will see all the figures \u0026ldquo;jump\u0026rdquo; into place as the captions are written to them, about one hundred milliseconds after the page loads. To avoid this, you can cover up the page until it is totally ready with a div:\n\u0026lt;div id=\u0026#34;loadingMask\u0026#34; style=\u0026#34;width: 100%; height: 100%; position: fixed; background: #fff;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; Then you can add a fade out to this div in the Javascript ready() function:\nel = document.getElementById(\u0026#39;loadingMask\u0026#39;); fadeOut(el);  The fadeOut() function is adapted from the youmightnotneedjquery.com fadeIn() function:\nfunction fadeOut(el) { el.style.opacity = 1; var last = +new Date(); var tick = function() { el.style.opacity = +el.style.opacity - (new Date() - last) / 80; last = +new Date(); // console.log(el.style.opacity);  if (el.style.opacity \u0026gt; 0) { (window.requestAnimationFrame \u0026amp;\u0026amp; requestAnimationFrame(tick)) || setTimeout(tick, 16); } else { el.style.display=\u0026#39;none\u0026#39;; } }; tick(); }  Go ahead and copy that to whatever site you want! The full code is here.\n","permalink":"/captioning-images/","tags":["coding"],"title":"Automatic captioning of images using Javascript"},{"categories":null,"contents":"  MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], displayMath: [['$$','$$'], ['\\[','\\]']], processEscapes: true, processEnvironments: true, \"HTML-CSS\": { linebreaks: { automatic: true } }, SVG: { linebreaks: { automatic: true } }, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], TeX: { equationNumbers: { autoNumber: \"AMS\" }, extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] } } });  MathJax.Hub.Queue(function() { // Fix  tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i How many ice cubes do you need to quickly cool down a hot beverage to its perfect drinking temperature?\nLets use physics to find the exact number of ice cubes to drop into a scalding hot cup of coffee or tea to make it the perfect temperature.\nThe beverage The hot beverage must lose a certain amount of energy in order to decrease its temperature to a warm temperature. The energy of heat loss is given by a difference of temperature. The equation is\n $$Q_{beverage} = c_{water} \\times m_{beverage} \\times \\Delta T_{beverage}$$  The specific heat of water, $c_{water}$ is 4.2 $J / g / °C$. The mass of a typical cup of coffee or tea, $m_{beverage}$ is typically around 480 grams. The change in temperature, $\\Delta T_{beverage}$, is the change between the initial brewing temperature and the final drinking temperature.  $$Q_{beverage} = c_{water} \\times m_{beverage} \\times (T_{i}-T_{f})$$ The ice Ice melts by absorbing heat, or energy. The heat absorbed by ice is given by\n$$ Q_{ice} = m_{ice} \\times Q_{fusion}$$\n where $Q_{fusion}$ is the enthalpy of fusion for ice, which is 334 $J/g$. Enthalpy of fusion is simply the amount of energy that will be needed to transform ice into cold water. Once the ice changes into cold water, it will begin to warm up, by absorbing heat from the beverage. As before, the water will absorb according to the equation\n $$Q_{ice-water} = c_{water} \\times m_{ice} \\times \\Delta T_{ice}$$  In this case, the change in temperature, $\\Delta T_{ice}$, is simply the final temperature, $T_{f}$, since ice has a temperature of 0°C.  $$Q_{ice-water} = c_{water} \\times m_{ice} \\times T_{f}$$ The beverage + ice  When we reach equilibrium, it means that the total energy lost by the beverage equals the sum of the energy of the ice and the cold water (once the ice has transformed), $Q_{beverage}= Q_{ice-water} + Q_{ice}$. When we plug in the equations above we get $$ c_{water} \\times m_{beverage} \\times (T_{i}-T_{f}) = m_{ice} \\times Q_{fusion} \\\\ + c_{water} \\times m_{ice} \\times T_{i} $$  The only unknown is the mass of the ice, $m_{ice}$, which we can solve for to get  $$ m_{ice} = \\frac{c_{water} \\times m_{beverage} \\times (T_{i}-T_{f})}{Q_{fusion} + c_{water} \\times T_{i}} $$ How many ice cubes do you need? Coffee is initially at a temperature of 85°C. Tea has a similar high, undrinkable, temperature. The perfect drinking temperature is 50°C. Given a typical cup of tea is about 480 grams, you need about 4 regular sized ice cubes. (A regular ice cube from a ice tray is about 30 g).\nHow fast does an ice cube melt? How much times does it take for the ice to melt? There are several modes of heat transfer - conduction, convection, radiation. It turns out that ice is pretty well described by mainly the convection heat transfer. This is described by Fourier\u0026rsquo;s law of thermal conduction:\n $$ \\dot{Q}_{melt} = k A \\frac{d T}{d x} $$ where $\\dot{Q}_{melt}$ is the heat flux and $k$ is the thermal conductivity. For water, the thermal conductivity is 0.591 $W / m / K$.\nIce cube area The area of the ice cube can be approximated by a cube of the same mass. That is,\n $$ A = 6 \\times (m_{ice})^{2/3} / 100^2 $$  where the mass of each one is $m_{ice}$ and the $100^2$ is for converting $cm^2$ to $m^2$. Though, really the surface area of the ice cubes might depends on time (the ice cube grows smaller). Temperature gradient The gradient of the temperature is between the surface of the ice and the rest of the hot water. Though this gradient can be pretty complicated (the heat diffusion occurs), we can approximate from the literature. Here is an infrared image of ice melting at room temperature1:\nAs you can see, the ice-air boundary is typically 0.002 meters, so we can approximate the ice water-boundary as $dx = 0.002$. The temperature difference is just the difference between the water and the ice, which is at 0, so $dT = T_{i}$.\nHow long does it take to melt?  Finally, then to get the time we can just use the equation from before and divide: $$ t_{melt} = Q_{ice} / \\dot{Q}_{melt} $$ so that\n $$ t_{melt} = \\frac{m_{ice} \\times H_{fusion}}{k \\times T_{i} \\times 6 \\times m_{ice}^{2/3} / 100^2 / dx } $$ which is measured in seconds.\nA typical ice cube weighs about 30 grams and a typical initial temperature for heated water is about 85°C. So a typical ice cube melts in about 70 seconds.\nTheory versus Experiment I hooked up an Arduino to a DS18B20 temperature probe and measured the change in temperature over time of 480 grams of water, with (red line) and without (blue line) ice.\nThe ice melted in about 65 seconds and brought the temperature down to 50.8°C. This is in good agreement to the theoretical time to melt of 70 seconds and the theoretical final temperature of 50°C.\nIn comparison, the water without out that started at about 77°C, without ice, took over 15 minutes to get to the same temperature!\nReferences  Badarch, Ayurzana. (2017). Application of macro and mesoscopic numerical models to hydraulic problems with solid substances. 10.13140/RG.2.2.27837.36325. [return]   ","permalink":"/ice-cubes/","tags":["science"],"title":"How much ice do you need?"},{"categories":null,"contents":" Social media seems to be more about creating a persona that voicing your thoughts and ideas. Not thinking about public opinion enables you too emit thoughts without fear of judgment, which is why I\u0026rsquo;ve found it helpful to use social media without being social.\nI make accounts on social media that are totally protected. I don\u0026rsquo;t follow anyone or let anyone follow me. I keep the account locked so no one can even visit it. This way, I can use the cutting edge technology ecosystem and infrastructure of social media giants for my own personal journal.\nI do program, so I could write my own diary program (and I have). But there is something nice about having a ready-made solution with so much support. In fact, just Twitter has almost 100,000 repositories of varying quality for interfacing with it. This means, if you decide you want a Twitter library written in [random language] then you probably can find it.\nSocial media as a private experience Here is how I use my social media. I am using Twitter, but that is interchangeable with most of the other platforms, as they are all big enough to have support. I could\u0026rsquo;ve easily done the same with Facebook, Tumblr, etc.\nKeep track of things to do I like to do stuff from the command-line, so I found one of the 100,000 repos devoted to interfacing with Twitter: https://github.com/sferik/t. Its well written and supported, and its easy to use. I use this for some of my updates.\nI keep a list of things todo. Using t I can easily see what I have todo:\n\u0026gt; t search timeline '#todo' | more #todo get ice cube trays from the dollar store #todo get a haircut  or update my todo-list\n\u0026gt; t update \u0026quot;#todo mow the lawn\u0026quot; Tweet posted by @?. Run `t delete status ?` to delete.  And if I\u0026rsquo;m on my phone, I can just go to my Twitter feed to quickly look at a grocery list, or update something I need to do.\nSample tweets from my #todo feed:\n#todo Make a collection of web articles that cite me \u0026mdash; Zak (@?) September 23, 2017 #todo get a haircut \u0026mdash; Zak (@?) September 20, 2017 Quickly jotting random thoughts My twitter feed is best for random thoughts. I like that the Twitter application is polished enough that you can use it anywhere, even when there is no data/wifi. The draft will be saved and posted when you reach a place that does.\nThis failsafe is hard to program into things I make, so I\u0026rsquo;m glad that I can take advantage of this to post random thoughts, such as:\nSuper-autological words\nThe word Noun is defined by being a noun.\nThe word Polysyllabic is defined by being polysyllabic.\n\u0026mdash; Zak (@?) September 23, 2017 vanilla ice cream in a unwashed cup of licorice tea is amazing\n\u0026mdash; Zak (@?) September 20, 2017 Using IFTTT to keep track of everything else There are many things you can hook up to IFTTT, to keep a record of in your Twitter biography. For example:\n Keep track of songs I like on Spotify. E.g.:\n#music \"Rusalka, Op. 114, B. 203, Act I: Lieblicher Mond (Song to the Moon)\" by Antonín Dvořák, Emalie Savoy, Bran… \u0026mdash; Zak (@?) September 20, 2017 Record the daily weather. E.g.:\n#weather Light Rain today, high of 42, low of 36, currently 37\n\u0026mdash; Zak (@?) September 21, 2017 Connect public life (Facebook, Instagram) to Twitter so my private log is updated.\n Keep track of my movements with the IFTTT geofencing.\n  Caveats Obviously, Twitter is a company basically offering a service for free. I would always be wary of that. So, I would never post things that are truly secret (i.e. passwords, bank statements, etc.).\nAlso, I chose Twitter because it has a option for export. Their export option is suboptimal (it only updates every two weeks or so), but it is a requirement that I can have my data that I create.\n","permalink":"/using-social-media/","tags":["thoughts"],"title":"Use social media without being social"},{"categories":null,"contents":"There are two reasons I think its good for everyone to have a good division between \u0026ldquo;personal\u0026rdquo; and \u0026ldquo;corporate\u0026rdquo; use for open-source software (OSS).\nIf you, the OSS maintainer, are compensated, everyone benefits. While your time spent coding your OSS is valuable, I think the frictionless delivery of new features and bug fixes is something that shouldn\u0026rsquo;t go away. Since I\u0026rsquo;m not actively supporting you financially to work on this, I can only hope that someone does so I can benefit. Thus, I encourage you to find a model that supports you, because that will also support all of us personal users!\nI trust more in your OSS code if it has some sort of drawback for personal users. If you offered the exact same features for corporate and personal use, I would believe this too good to be true. Things that seem too good to be true are often nefarious in hidden ways (for example, Facebook lets you post photos and add friends for free, but they can collect and sell your data). If you are transparent about what is different for personal users then it makes me happy to have a drawback so I can be assured that something sketchy isn\u0026rsquo;t happening to monetize this in another way.\nUnfortunately most people think they are entitled to OSS new features, bug fixes, general support. There are the vampires who believe that they can take your lifeforce from you for nothing. Then there are the zombies who believe that your mind is not your own, and that whatever is produced should be free and open-source.\nBut unfortunately for them, you don\u0026rsquo;t owe anything to anyone excepting your business clients. Your business is your business, and whatever you happen to let spill over in the open-source community should only be seen as a benefit, never a negative, to the universe of open-source code.\n","permalink":"/oss/","tags":["coding","thoughts"],"title":"OSS divisions"},{"categories":null,"contents":"My name is Zack and I am an academic scientist and programmer.\nThis site has my notes on interesting recent science and my adventures in coding and art (which often overlap).\nI\u0026rsquo;ve made other sites, including a list of my open-source projects, my academic page, my smart Raspberry Pi projects, essays on afrofuturism, book suggestions, music suggestions, movie suggestions and a recursive recipe cookbook.\n","permalink":"/about/","tags":null,"title":"About"},{"categories":null,"contents":"Please feel free to get in touch. Send me your thoughts or questions, any thoughts or questions at all.\n Email me at zack dot scholl at gmail dot com. Tweet me @yakczar. Keybase chat me @schollz.  I will probably be able to respond to most interactions within 72 hours.\n","permalink":"/contact/","tags":null,"title":"Contact"},{"categories":null,"contents":"This is a list and description of the 40 projects that I created that I still maintain, ordered in terms of popularity (e.g. Github stars).\n find (4,275 stars) High-precision indoor positioning framework for most wifi-enabled devices. howmanypeoplearearound (2,967 stars) Count the number of people around you 👨 ‍ 👨 ‍ 👦 by monitoring wifi signals 🛰. find-lf (437 stars) Track the location of every Wi-Fi device (:iphone:) in your house using Raspberry Pis and FIND. cowyo (371 stars) A feature-rich wiki webserver for minimalists 🐄 💬. gojot (322 stars) A command-line journal that is distributed and encrypted, making it easy to jot notes 📓. musicsaur (284 stars) Music synchronization from your browser. PIanoAI (233 stars) Realtime piano learning and accompaniment from a Pi-powered AI 🎹. progressbar (215 stars) A really basic thread-safe progressbar for Golang applications. croc (207 stars) Easily get things from one computer to another 🐊. poetry-generator (206 stars) A Python2 based Backus-Naur poetry generator. closestmatch (140 stars) Golang library for fuzzy matching within a set of strings 📃. pluck (134 stars) Pluck text in a fast and intuitive way 🐓. playlistfromsong (108 stars) Create an offline music playlist from a single song :notes:. linkcrawler (105 stars) Cross-platform persistent and distributed web crawler 🔗. jsonstore (76 stars) Simple thread-safe in-memory JSON key-store with persistent backend. find-maraudersmap (45 stars) Internal positioning for everyone, in the style of Harry Potter. rpi_ai (38 stars) An AI developed for the Raspberry Pi. goagrep (37 stars) agrep-like fuzzy matching, but made faster using Golang and precomputation. cowyodel (31 stars) Easily move things between computers with a code phrase and https://cowyo.com 🐄 💬. bol (30 stars) Command-line and web journal that stays synchronized and encrypted across devices. chickencam (29 stars) Build a Raspberry Pi ChickenCam in 10 easy steps. markdown2tufte (24 stars) Process markdown into a nice Tufte-like website :book:. crawdad (19 stars) Cross-platform persistent and distributed web crawler 🦀. beowulf_ssh_cluster (16 stars) Skeleton program for a simple Beowulf cluster that uses ssh to communicate. boltdb-server (15 stars) Fancy server and Go package for connecting to BoltDB databases. quotation-explorer (13 stars) Explore and search over 120,000 quotations, with the click of a mouse :earth_americas:💬. readable (11 stars) Making web pages readable in a browser and in the command line 🔗 :book:. string_matching (8 stars) A simple and fast approach to selecting the best string in a list of strings despite errors or mispelling. topscience (8 stars) Markov-chain generation of 🔬 science article names. onetwothree (8 stars) A responsive minimalist theme for Hugo that is simple as 1, 2, 3. extract_recipe (7 stars) Extract recipes from websites, calculates cooking times, collects nutrition info from USDA database. find-tools (6 stars) Tools to plot and analyze FIND data. youtube-music (5 stars) Convert a playlist to a set of MP3s. makemydrivefun (5 stars) Source code for https://makemydrive.fun. timetomakefood (4 stars) Recursive recipe cookbook to prescribe recipes from their core components :book: 🍔. prevent-link-rot (4 stars) Simple utility to convert links in any file to permanent links via the https://archive.org/web/ or http://perma.cc. urlss (4 stars) URL shortening service. motion_sensor_diy (3 stars) Electronic schematics for RF motion sensor that uses Arduino as receiver hub. jekyll-tinyfeet (3 stars) A Jekyll template with the features I like and a minimal footprint. webcontentgrabber (3 stars) Isolates a region of any webpage with words related to the content that you want.  ","permalink":"/projects/","tags":null,"title":"Projects"},{"categories":null,"contents":"I was looking at my bank statement last week and something was wrong. I had a charge of $15 for The Service (a big company that I will not name here), a service I hadn\u0026rsquo;t used for years after I tried one of their free items. Did I cancel it? No, I didn\u0026rsquo;t think so. But also, I couldn\u0026rsquo;t remember actually signing up for it.\nIt got worse. Looking back at my previous statements I saw that I was also charged the previous month as well. And the month before that. And before that. And over and over for more than four years! Did I miss the billing statement in my email? I checked, but the only email from The Service was about the free item I got over four years ago and a couple emails about a new offer to join The Service. The only \u0026ldquo;bill\u0026rdquo; was in the email for the first item from The Service which only said \u0026ldquo;Total due: $0.00\u0026rdquo;.\nI sign up for free services all the time, and always cancel on time. I\u0026rsquo;m savvy. Or at least, I thought I was. I tried the customer service. They said they would refund on eyear in my case. That\u0026rsquo;s not bad, I thought, but I am still out over $600 for something I never used. Failing to cancel a service after a free trial shouldn\u0026rsquo;t induce a $600 mistake. Especially, since I believe The Service was at fault for not alerting me about their billing.\nI\u0026rsquo;m a researcher, so I did some research. Unfortunately it may be legal to not send out billing statements (another company told me it is the \u0026ldquo;industry standard\u0026rdquo;). I have huge qualms with this (it seems awfully predatory not to tell someone you are taking money from their bank account).But In order to convince customer service to repay me back in full, I would need to find something they did that was actually illegal. So I pulled up the legally binding contract between us - the Conditions of Use.\nAt the very bottom of the Conditions of Use from The Service, I found something promising. It said that if the Conditions of Use were to change, I would automatically agree and be bound to them unless I \u0026ldquo;stop using the service.\u0026rdquo; That sounded great, until I kept reading and saw that to \u0026ldquo;stop using the service by canceling the membership.\u0026rdquo; I had not actually canceled the membership that I supposedly signed up for, so I was stuck.\nBut, maybe not. This Conditions of Use was the current version. Using the Internet Archive (thank G-d it exists) I found the Conditions of Use that I actually agreed to in 2013. Strangely, it did not say anything about \u0026ldquo;canceling the membership\u0026rdquo; as the only mode in which one can \u0026ldquo;stop using the service.\u0026rdquo; This seemed to leave the definition open to interpretation by a reasonable party - and I\u0026rsquo;m pretty sure any reasonable party would agree that not using The Service for years would indeed fulfill the requirement to \u0026ldquo;stop using the service.\u0026rdquo;\nI had my loophole. Based on this Conditions of Use, I was being billed and held to an agreement that should have legally been voided when I did not accept the new Conditions of Use. Using the Internet Archive again, I found the first change in the Conditions of Use that I would have had to accept by continuing to use the service. This Conditions of Use was dated one year after I had signed the first one. Thus, it seemed I could likely recoup about three years of billing that The Service was illegally binding me to a contract that we had both agreed to.\nI wrote a letter to The Service about my findings. I outlined the unethical and predatory business tactics of sending emails for bills of $0.00 and not actually sending an actual bil. But, more importantly, I demonstrated how they had violated their own terms set out in the Conditions of Use that I agreed to. At the end of the letter I asked to sort this out between ourselves, or get an arbitrator.\nThe next morning I got a phone call. \u0026ldquo;Before we begin,\u0026rdquo; they said, \u0026ldquo;we will reimburse all your money except the month you used The Service.\u0026rdquo; That\u0026rsquo;s not bad, I thought. Getting back hundreds of dollars was worth the $20 I would still have to pay for the \u0026ldquo;free\u0026rdquo; item I purchased back in $20. I consider it the cost of the lesson for not carefully checking my bank statement for four years. They also said that it was strange I wasn\u0026rsquo;t getting emails and they were going to Spam (I check Spam almost every day, and confirmed to The Service this wasn\u0026rsquo;t the case), but I have my doubts on their insistence of the strangeness.\n","permalink":"/beware-of-the-free-trial/","tags":["thoughts"],"title":"Beware of the free trial"},{"categories":null,"contents":" What would happen if you made a recipe out of the ingredients for a recipe? What if you repeated this process over and over? I ended up doing this and generated the recipe that starts with the most basic ingredients - dirt, water and sun.\nHere are the ingredients of my favorite recipe - a recipe for bread - that I have made almost every week during the past decade:\n 7 1\u0026frasl;4 cup flour 3 1\u0026frasl;2 teaspoon salt 3 1\u0026frasl;4 cup water 1 tablespoon yeast  After thinking about this recipe almost a thousand times, and being inspired by a number of DIY cookbooks, 1 2 3 I started wondering - why don\u0026rsquo;t I make flour? and why don\u0026rsquo;t I extract my own salt? Flour and salt are ingredients that I usually buy from the store. However, what would happen if I included the recipe for salt and flour in the recipe for bread? What would the ingredients and instructions look like, and how long would this elongated recipe take to make?\nIngredients are usually restricted to the foods we can buy at the store. Lets remove this restriction and investigate the ingredients of ingredients. In order not to get too far I will define \u0026ldquo;core ingredients\u0026rdquo; that are irreducible (we don\u0026rsquo;t need to specify the number of Carbon atoms in a loaf of bread). Core ingredients include soil, sun, water, and living organisms (cow, yeast, chickens).\nRecipe recursion In order to make bread from scratch,4 we can take each ingredient in the original ingredient list and generate a list of ingredients for that. We can then use a mathematical concept known as \u0026ldquo;recursion\u0026rdquo; - the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself.\nIn order to iterate through the recipe as a recursive process, we need a recursive definition of a recipe. For my purposes I created a list of axioms which define the recipe:\n Recipes are ingredients. A recipe is composed of reactants, products and instructions. The reactants are a list of recipes needed to complete the reaction. The products are the recipes that result. The instructions explain the transformation (how much, how long, etc.) The same reactants and the same instructions always create the same products (note: the inverse is not necessarily true).  Using these axioms, I wrote a document containing lists of various recipes which are known precursors to flour, salt, and many other foods.\nIngredients to really make bread from scratch What is the recipe for flour? It is basically grinding of wheat berries. What is the recipe for wheat berries? It is basically the winnowing of the grain from wheat. What is the recipe for wheat berries? \u0026hellip;\nThese are the questions that I asked myself over and over again to do a recursive replacement of ingredients in the bread recipe, until the final core ingredients were reached. After this process I obtained the following new list of ingredients:\n Sun Plot of soil Water source 1 gallon seawater 3 1\u0026frasl;4 cup water 1 tablespoon yeast  \u0026ldquo;Flour\u0026rdquo; has been replaced by \u0026ldquo;plot of soil, water source, and sun\u0026rdquo; to grow the wheat and \u0026ldquo;salt\u0026rdquo; has been replaced by \u0026ldquo;seawater.\u0026rdquo; Of course, there is a process for converting these ingredients into the final loaf of bread, which can be visualized in the following:\nIn the figure, it shows the ingredients (in red) and their intermediate products (in yellow) and the final recipe (in green). It turns out there is a good reason to buy flour at the store - there are a lot of steps and a lot of materials needed to create it! I bet it tastes good, though.\nTime to make bread from scratch Of course, there is also a set of instructions for each step in this graph (40 instructions total!). Each instruction carries with it the amount of time to create the necessary intermediate product:\n Loaf of bread: 6 hours and 50 minutes Salt: 2 weeks, 10 hours Flour: Over 4 months  In total, then, making this loaf of bread from the very core ingredients will take 4 months, 3 weeks, 5 days, 14 hours, and 25 minutes (which includes the intermediate processes for grinding and threshing wheat).\nTime to make food - the app I started compiling similar recipes for cookies, tortillas, noodles and found it very interesting to peruse their recipes to the core ingredients.\nYou can check out different recipes at the website I made with an app to calculate this automatically: timetomakefood.com.\nThe tool is open-source, and you can edit the code and add your own recipes: github.com/schollz/timetomakefood.\nI am glad grocery stores exist, because I like making bread every week, and not three times a year.\n Alana Chernila (2012). The Homemade Pantry: 101 Foods You Can Stop Buying and Start Making. Clarkson Potter/Publishers. ISBN 978-0-307-88726-9. [return] Jennifer Reese (16 October 2012). Make the Bread, Buy the Butter: What You Should and Shouldn\u0026rsquo;t Cook from Scratch\u0026ndash;Over 120 Recipes for the Best Homemade Foods. Simon and Schuster. ISBN 978-1-4516-0588-4. [return] Miyoko Schinner (16 June 2015). The Homemade Vegan Pantry: The Art of Making Your Own Staples. Potter/TenSpeed/Harmony. ISBN 978-1-60774-678-2. [return] Skip this section if you are not a nerd. [return]   ","permalink":"/recursive-ingredients/","tags":["food","coding"],"title":"Recursive ingredients"},{"categories":null,"contents":" Can a neural network help me improve my art? Could I take a photo, paint it, and then use a neural network to render the original photo in the style of my painting to make it better? Could I learn something from it?\nSome background I started thinking about these questions because I’ve been reading about neural networks, and I’ve seen a lot of these neural networks create new works of art by rendering a photo in the style of a famous painting1.\nNeural networks are complicated and worth reading about2. Basically, a neural network is a system composed of computational “neurons” linked up in a way that is similar to the brain that try to solve problems. The connections between these neurons are given specific weights, as they learn how to classify one thing from another. A neural network understands a painting by looking at its specific features. So far researchers have discovered that paintings have two main transferable features: \u0026ldquo;content\u0026rdquo; and \u0026ldquo;style\u0026rdquo;. When we look at a painting, like Jean-Jacques Rosseau’s cat, we experience both the content and the style of the painting simultaneously, but we can (usually) identify them separately. The content is the the subject of that the painter is trying to convey (the cat), where style is the manner which they convey it (bold colors and strokes, awkward proportions in the legs). Rosseau cannot fool us into thinking he did not paint a cat, even though he did an awfully strange representation of it.\nRecently, a paper by Gatys, Ecker, and Bethge3 was able to show that representations of content and style are separable. They used an algorithm that makes use of a convolutional neural network4 and demonstrated the separability of content and style by transferring the style of a Starry Night by Van Gogh (i.e. the iconic swirls of dark blue pastel) to a photograph of the Neckarfront houses of Tubingen, Germany.\nThe genius of the paper by Gatys, Ecker, and Bethge3 is that they leverage neural networks for classifying local features in images to extract the representations of content. The neural network used here is the VGG-Network by Simonyan and Zisserman which is the state-of-the-art for identifying things in images5. To transfer Starry Night to Neckarfront, Gatys, Ecker, and Bethge simply exploited the neural network to copy the set of neurons that finds representations of content (which parts of the image are the “building”), and then using another layer that extracts the style, or texture (i.e. non-features that are local in context, like the swirls in Van Gogh’s painting).\nMaking a neural network to paint with my style To make a neural network paint like me, I will first select a photo and then paint the photo myself. Then I will use my painting to generate a neural network rendering from the original photo. That is, I will use the style from the painting I create and transfer it to the content of the photo that I used to create the painting. Technically speaking, I used the algorithm from Gatys, Ecker, and Bethge, as coded by jcjohnson compiled with the CUDA backend to use on a GTX 1080Ti.\nI started with a photo of a heron.\nThen, I create my own Gouache painting of the photo.\nFinally, I used Torch1 to transfer the style of my painting to the content of the photo to create a neural network rendering. The results are impressive. The neural network uses my color palette and some of my strokes, but seems to suppress a lot of my mistakes and more precisely articulates the original photo. For example - the wings that I painted are very unordered and sloppy, but the neural network used the original wings and used the idea of my painting to fix them.\nThe neural network becomes the teacher The heron is not an outlier. Almost every painting I create can be re-imagined by a neural network to be rendered as a much cleaner and more professional painting6. The machine makes a professional out of a novice.\nHere are more examples showing the original photo (left), my painting of the photo (middle) and the neural network rendering of the photo using the style of my painting (right). After looking at them quite a bit, I can see some simple things I can do to improve my own painting.\nClick on any of the paintings to see them in full resolution.\nCat I like how the neural network put more white around the eyes and also patches of gray to shadow the eye and mouth. I could have also been more liberal with my striping on the arm.\n\nBison Though I like the original watercoloring better, I think the neural network does a better job on the bison\u0026rsquo;s hair on its head - using a reddish color and blending it out.\n\nKoala My mistakes fixed by the neural network - I made the yellow around the baby koala is too wide, and its head too light. I love the neural network ears - they aren\u0026rsquo;t outlined so it gives them a lighter touch, and the fur on the big koala has more brush strokes which makes it more dynamic.\n\nDeer and cat I also think my rendition for the watercolor is very good, although I wish I had gotten the proportions better, as it looks a lot nicer. Also a thinner outline would have been better, as the neural network does. I also love how the neural network reinterprets the background - putting in more orange and gray which complements the deer and cat.\n\nFox I had a lot of trouble on the tail of this fox, and the neural network has a great way of doing it - simply dab the outside and then blend in the grey and red. I also love the purple on the fox hind leg, which I was not bold enough in bringing out on my own painting.\n\nDog and owl I love my painting here as well, but the proportions are wrong, my dog is far to narrow. I also could have shadowed the snout a little differently, to make the sides of the head stand out more, like in the neural network.\n\nMountain Goat A white animal is very difficult for me, but I think the neural network shows a possible solution: focus on the middle with gray/blue and then on the outside with yellow.\n\nConclusion It seems a computer is better at painting than I am.\nBut seriously, this is a rather neat illustration of the separation of content and style. In the future I would like to instead train my own neural network with a corpus of my photos and illustrations to transfer my style to photos. In this case, I imagine it will be agnostic to content but will merely encode my style. I have to learn how to train neural networks first, though.\n Some great resources on Github are awentzonline\u0026rsquo;s image analogies and jcjohnsons\u0026rsquo;s Torch implementation of neural styles. [return] Here is a great, free, online book written by Michael Nielsen which gives a great introduction to neural networks. [return] Gatys, Leon A., Alexander S. Ecker, and Matthias Bethge. \u0026ldquo;A neural algorithm of artistic style.\u0026rdquo; arXiv preprint arXiv:1508.06576 (2015). [return] A convolutional neural network is a special kind of neural network that links up the computer neurons in a way that mimics how the visual cortex operates. [return] Simonyan, Karen, and Andrew Zisserman. \u0026ldquo;Very deep convolutional networks for large-scale image recognition.\u0026rdquo; arXiv preprint arXiv:1409.1556 (2014). [return] The cases where the neural network did poorly was in paintings where I left the background completely white. [return]   ","permalink":"/watercolor/","tags":["painting"],"title":"Watercoloring with neural networks"},{"categories":null,"contents":"The word \u0026ldquo;noun\u0026rdquo; is a singular word. It is the only word that is what it is. Such a word is an \u0026ldquo;autological word\u0026rdquo; as they posses the property that they express. To determine if X is autological, it requires answering yes to any of the following questions:\n Is X a X word? Is \u0026ldquo;X\u0026rdquo;, X?  Some great examples of autological words are \u0026ldquo;polysyllabic\u0026rdquo;, \u0026ldquo;unhyphenated\u0026rdquo;, \u0026ldquo;harmless\u0026rdquo;, \u0026ldquo;pentasyllabic\u0026rdquo;, \u0026ldquo;real\u0026rdquo;, and \u0026ldquo;unique\u0026rdquo;. Dr. Henry Segerman has a long list of these autological words on his website.\nThere is analog to autological words in the digital world: \u0026ldquo;quines\u0026rdquo;. Quines are non-empty programs that produce a copy of its own source-code as its only output. A Python quine is rather simple:\ns = \u0026#39;s = %r\\nprint(s%%s)\u0026#39; print(s%s) A Golang quine is also pretty simple:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Printf(\u0026#34;%s%c%s%c\\n\u0026#34;, s, 0x60, s, 0x60) } var s = `package main import \u0026#34;fmt\u0026#34; func main() { fmt.Printf(\u0026#34;%s%c%s%c\\n\u0026#34;, s, 0x60, s, 0x60) } var s = ` Here\u0026rsquo;s an Idea: what if you wrote a program that quinified your program? It can take any generic program and then re-write so that it also produces a code of itself.\nAnd here\u0026rsquo;s a Thought: what are other things in the world that are quines or autologically predisposed? Are there other things that are in themselves representations of itself? Without resorting to The Society of the Spectacle, of course.\n","permalink":"/quines/","tags":null,"title":"Autological words and quines"},{"categories":null,"contents":"Lots of people ask me this question, and I end up writing the same answer over and over. I just wrote my plain answer here so I can just link to it. Don\u0026rsquo;t hesitate to ask me other questions, though if you need. The basic answer is: because of time and money.\nCoding in Go saves me time. When I write code, I often write run the program periodically to test it. I like Golang because it offers a simple and easy way to split up the code into pieces that are periodically tested, so you can test everything at once. Sure, Python does this, but its builtin to Golang so nicely that the barrier is small. I\u0026rsquo;ve spent too long trying to figure out Python tests to ever bother using them anymore. They work great, but its just easier for me to do it in Golang.\nCoding in Go saves me money. I host dozens of web apps on a single DigitalOcean droplet. This droplet has half a gig of RAM and some swap. From my experience, every Python web server I write ends up being around a quarter gig of RAM. There is no way I can run a dozen of these on a single Droplet, I\u0026rsquo;d have to buy more. With Golang, I don\u0026rsquo;t need to buy more because each binary usually consumes 10-20 MB of RAM.\nIn the end, though, most things are just about preference. Why use pencil over pen or pen over mechanical pencil? Its preference. All three will work just fine. My preference is to use Golang when I want and use Python when I want. Generally nowadays I will prototype in Python (which is usually faster to write) but then write the production in Go (which is usually faster and easier to run).\nI also like a bunch of other features of Go which are still improving. The go fmt is incredible, as I\u0026rsquo;ve spent sometimes hours trying to pass continuous integration tests in Python which often only are failing because of different formatting issues (autopep8 mostly solves this in Python, but still some people have different preferences with autopep8).\nAt the risk of sounding unpopular, I also greatly enjoy how Go manages dependencies. The current tool dep, simply copies all the code of your dependencies, in a way that Node does. However, unlike Node, in Golang you are encouraged to cut-and-paste so usually the other dependencies are small. Having the ability to have the entire codebase in a single folder is a wonderful thing, in the case that dependencies suddenly go missing (which was a problem in Node and also for me recently).\n","permalink":"/why-go/","tags":["coding","golang"],"title":"Why Go?"},{"categories":null,"contents":"This quote by Oscar Wilde,\n Everything in moderation, including moderation\n is wrong.\nBy doing everything in moderation \u0026ndash; including moderation \u0026ndash; then that means you are overdoing moderation, which the quote forbids.\nIt should be amended:\n Everything in moderation, excepting moderation\n ","permalink":"/moderation/","tags":["thoughts"],"title":"Moderation"},{"categories":null,"contents":" I like wordpress, but it is very intensive to get working, as it uses a lot of PHP and requires SQL. Of course, nowadays you can do everything in Docker, so here is my method for getting wordpress to work great on Docker.\nUsing Docker, I was able to get 2 blogs run on the smallest DigitalOcean droplet (which was already running two dozen other things). Each blog required 360MB of RAM, and the total Docker space was 3.1G.\nThe following instructions will enable you to go from zero to Wordpress in about six minutes.\nSetup First make a file docker-compose.yml:\nversion: \u0026#39;2\u0026#39; services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: wordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - \u0026#34;8001:80\u0026#34; restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_PASSWORD: wordpress volumes: - /path/to/some/folder/on/your/computer/wp_html:/var/www/html volumes: db_data: Then, to start just use (add -d for daemon mode)\ndocker-compose up  If you need to stop it just use\ndocker-compose stop  Reverse proxy If you are using a domain name, you can easily use Caddy as a reverse proxy. Here is an example Caddyfile:\nhttp://blogname { proxy / 127.0.0.1:8006 { transparent } } Make sure to goto your blog and update it accordingly to http://blogname.\nFor using SSL, checkout this blog which describes the process for correctly configuring Wordpress to allow it.\nBackup/Restore Wordpress on docker is also nice because its very easy to move. I basically copied the instructions here to get a simple way to backup and restore a Wordpress instance.\nTo backup:\ndocker exec -i wordpress_db_1 mysqldump --user=wordpress --password=wordpress wordpress \u0026gt; backup.sql tar -czvf wp_html.tar.gz wp_html  To restore:\ndocker exec -i wordpress_db_1 mysql --user=wordpress --password=wordpress wordpress \u0026lt; backup.sql tar -xvzf wp_html.tar.gz  ","permalink":"/wordpress-on-docker/","tags":["coding"],"title":"Using Wordpress with Docker"},{"categories":null,"contents":" Like many, I\u0026rsquo;ve used dating apps (Tinder / Bumble / OkCupid) to find potential dates. I was annoyed at having to swipe right on a lot of people who would probably never respond to me after I swiped right. It seemed to me to be a waste of time to swipe through those people who would not actually be available in my dating pool. I\u0026rsquo;d rather only view a pool of people who respond to me so we can open a dialog right away to see whether we would match.\nI decided to automate swiping to get past this first block in this process of online dating. With adb and bash, I can have my phone swipe right on everyone automatically. Then, when I use the app I can focus on interacting with the people that match me instead of searching for matches!\nThis has been successful for me, and I\u0026rsquo;m making it \u0026ldquo;open-source\u0026rdquo; so maybe it will help you.\nInstructions The following will be instructions for Android phones only.\n Download the android debug bridge for your operating system: Windows, Mac, or Linux. Then unzip and cd into the platform-tools directory.\n Enable your phone to use adb. Go to Settings \u0026gt; About Phone and tap Build number seven times. Then return to previous screen to find Developer options at the bottom. Finally, goto Developer options and enable USB debugging.\n Plug in your phone, and follow the prompts on the phone to let it connect. Then open the swiping app (Tinder / OkCupid / Bumble) app, and in a terminal copy and paste this magic code into your terminal:\n  while true; \\ do ./adb shell input touchscreen swipe 300 800 1000 800 100; \\ sleep .$[ ( $RANDOM % 10 ) + 1 ]s; \\ done;  This bash code utilizes adb to perform a swipe from (300,800) to (1000,800) over 100 milliseconds. If its not swiping in the right place for you, then change the numbers 300 and 1000 until it performs the swipe in the right place. You can test the swiping location by downloading any kind of paint app and running the code above.\nPlug in your phone, run the code, and wait about an hour. By the next day you should have lots of new people to converse and connect with. Good luck in the dating world!\n","permalink":"/skip-swiping/","tags":["coding"],"title":"Skip swiping with adb and bash"},{"categories":null,"contents":" We have all marveled at the astonishing feat of being able to hold up massive amounts of weight with only phonebooks. Mythbusters even went so far as to use tanks to try to pull apar the phone books. Since then, however, the origin of this phenomenon has remained very elusive and escaped full description.\nIt was first thought that the mechanism is due to the friction between interleaving pages. A new paper by Hector Alacron and colleagues1 finds that this explaination is incorrect and offer a more intuitive and more predictive explaination. Alacron and his colleagues posited that the extreme amounts of traction force come from an orthogonal component of force that is due to the non-zero angles that the phonebook pages make as the sheets are pushed to the outside. That is, the strength of this system is then completely due to the operator that is pulling the pages apart - as they exert more force, the pages on the outside push in and thus make it hard to pull out. It is, most simply, a chinese finger trap.\nIt\u0026rsquo;s important to correct ourselves when we mispeak and to re-interpret theories when new evidence presents itself. The previous explaination of the phonebooks ammends itself to this. The previous assertion and accepted answer was that the increase in the number of pages increased the frictional force. While this is true, the researchers noticed that friction cannot explain the strength because the gravitational forces that can apply orthogonal forces do not change when the books are flipped to their side (where the friction is changed).\nEnthusiasts of physics should care, as now their is better theory and experiment to support a better hypothesis about the interleaved phonebooks. Popular culture enthusiasts might care too, to learn that Mythbusters maybe got it wrong.\nReferences  Alarcon, Hector, et al. \u0026ldquo;The enigma of the two interleaved phonebooks.\u0026rdquo; arXiv preprint arXiv:1508.03290 (2015).  ","permalink":"/interleaved-phonebooks/","tags":["science"],"title":"How do interleaved phonebooks stay together?"},{"categories":null,"contents":"(Yes, yet another description of how Bitcoin works)\nStandard currencies like USD, Yen, Euro\u0026rsquo;s all have a central bank associated with them that can print and distribute money at their whim. Bitcoins are a special type of currency - a cryptocurrency that is completely decentralized. Instead of a bank manager looking over the system and injecting cash when needed, the decentralized currency system monitors and regulates itself! How is this possible?\nThe decentralized Bitcoin currency operates with a security system that is inherent to its creation. Security is mainly provided through RSA encryption (widely used on the internet) and hashing. Hashing is basically a irreversible and unique encryption of any string of number and letters. For instance, \u0026ldquo;The quick brown fox.\u0026rdquo; becomes \u0026ldquo;b61e52d47fe1c856c5f0fec57b560b794adf6561\u0026rdquo; after a SHA-1 hash while a sentence with only one difference (\u0026ldquo;The quick, brown fox.\u0026rdquo;) becomes \u0026ldquo;cd857b0849271ecfc0ba58e5db27dcba8e8d054f\u0026rdquo;. Hashes are useful because their randomness gives no inclination to the content of the original text, and the process of reversing a hashed value into its original string is essentially impossible.\nThere are three major problems posed by having a currency that uses a universal ledger.\nThe first major problem is how to prevent malicious attacks onto a ledger which is available to everyone and anyone on the peer-to-peer network? The solution to this is hashing the first transaction and then propagating the previous hash with all following transactions. Thus the true ledger can easily be checked by hashing every transaction. If the ledger had been altered in any way, the resulting hash would not match the previously accepted versions of the ledger and it would be rejected.\nThe second problem is how to infuse money into a decentralized cryptocurrency system - where does the money come from? In the Bitcoin system, a single Bitcoin is injected to the system each time that a hash of a transaction is solved. To be \u0026ldquo;solved\u0026rdquo;, Bitcoin requires the hash to have certain parameters, i.e. the hash must start with the letter \u0026ldquo;B\u0026rdquo;. Different hashes are obtained by adding in a \u0026ldquo;fudge number\u0026rdquo; in addition to the current transaction and the previous hash. Changing the fudge number will randomly change the resulting hash, but does not change any of the important transaction details. Thus, every peer on the network changes the fudge number until their hash fits those parameters and is considered solved. This hashing, often called \u0026ldquo;mining\u0026rdquo;, provides security of the ledger but takes significant computational (and energetic) costs. These costs are alleviated by awarding the hash-solver in the network the Bitcoin.\nFinally, a third problem that needs to be overcome is how to prevent double-spending? In the currently described system, a user may spend Bitcoin (by having the hash of their transaction solved) and then spend the same Bitcoin before the previous one propagates through the network - essentially creating two ledgers with the same Bitcoin. However, this is solved in Bitcoin quite simply because hashing is a hugely difficult process - it would take a single computer almost 98 years to solve one hash - so it is very unlikely in the first place that a single person could manifest an attack on their own. If the situation arises however, the branched ledgers will be resolved on the next hash, such that the longest branch is accepted as the \u0026ldquo;true\u0026rdquo; ledger and all other ledgers and their transactions are invalidated. Thus it is commonly purported that one should wait 10-20 minutes before trading goods with Bitcoins to ensure the transaction is propagated and validated in the system.\nBitcoin is really the solution to these main problems. As a technical theory it is quite elegant, but it has so far managed to produce a viable, practical currency as well!\n","permalink":"/bitcoin/","tags":["science","bitcoin"],"title":"What is bitcoin?"},{"categories":null,"contents":" Cataracts are the clouding of the lens in the eye which can lead to blindness or can severely impair sight. Cataracts are most commonly associated with age, but there are about 20 million people on Earth that were born with cataracts. The cause of these congenital cataracts are varied but most suggest that its the crystallin proteins themselves that get mutated. (1) The eye produces these crystallin proteins that are supposed to last a lifetime, so when they are mutated they become unstable and cause cataracts! These are very hard to treat, because its hard to replace crystallin proteins. Recently, a large group of researchers have identified another cause of congenital cataracts - mutations in the gene that creates lanosterol - and they discovered a simple way to treat them! (2)\nSo what does lanosterol have to do with aggregation of proteins and the cause of cataracts? Lanosterol is the structural precursor to steroids and has little to do with crystallin proteins in the eye. Lanosterol comes from squalene and can be used to form testosterone, estradiol and cholesterol from enzymatic catalysis.\nThe researchers noticed that a lot of people born with cataracts had some mutations in the genes that help to produce lanosterol in the human body. Obviously then, you might think that increasing lanosterol to compensate for your body\u0026rsquo;s malfunctioning lanosterol synthetase might help get rid of cataracts\u0026hellip;and you would be right! The researchers found that lanosterol can actually significantly decrease protein aggregation of the crystallins in the test tube. The researchers used transmission electron microscopy to show that lanosterol actually dissolved pre-formed amyloid-like fibrils of crystallin proteins - in other words lanosterol can reverse aggregation!\nAnyone with cataracts should care, and people that study protein folding diseases should care! Researchers found that simply increasing the dosage of lanosterol could help cataractous rabbits, so it might also work in humans. It\u0026rsquo;s usually not so simple to solve protein aggregation diseases (like Huntington\u0026rsquo;s and Alzheimers) because we have no way of reversing the aggregation. This simple addition of lanosterol might be useful in the combat against these other protein folding diseases!\nWill lanosterol help reduce aggregation of other amyloid fibrils in other protein folding diseases? How exactly does lanosterol interact with crystallin proteins to de-aggregate them? These, and more questions have yet to be answered, so stay tuned to science!\nReferences  Sun, H., et al. \u0026ldquo;Gamma-S crystallin gene (CRYGS) mutation causes dominant progressive cortical cataract in humans.\u0026rdquo; Journal of medical genetics 42.9 (2005): 706-710. Zhao, Ling, et al. \u0026ldquo;Lanosterol reverses protein aggregation in cataracts.\u0026rdquo; Nature (2015).  ","permalink":"/cataracts/","tags":["science","protein-folding"],"title":"A possible cure for cataracts"},{"categories":null,"contents":" There is a class of ants that survive in the Sahara desert despite it being one of the hottest places on Earth, where the surface temperature can reach up to 150 degrees Fahrenheit. These ants, called \u0026ldquo;silver ants\u0026rdquo; or Cataglyphis bombycina have recently been found to harbor specialized triangular hairs that enable them significantly increased thermoregulation, as reported in the recent issue of Science. [1] Though the surface of the desert exceeds 150F, the ants can keep an internal temperature of 120F. They do this be frequently cooling off, but the brunt of the work is done by specialized little hairs that are triangular.\n Did you know? Some facts about ants!  The total weight of all ants is at least as heavy as the total weight of all humans! Ants can hold up to 100x their own weight. Ants can live up to 30 years. Some ant colonies can reach thousands of miles across.   Triangular hairs are one of Nature\u0026rsquo;s way of producing the best solution to a common problem. Hairs can reflect sunlight thus preventing their internal organs from heating up. It turns out that triangular hairs are better than circular hairs because it allows for better total internal reflection. Total internal reflection is a phenomenon where light is entirely reflected and not transmitted if the striking angle is bigger than the \u0026ldquo;critical\u0026rdquo; angle. Having a triangular hair helps to reflect much more of the incoming light which prevents heating up the ant!\nPreventing solar radiation is a problem that lots of engineers encounter when building devices and infrastructure. This discovery shows that there are more clever solutions to producing high reflectivity thus eliminating a lot of the heat transmission to the inside.\nReferences  Shi, Norman Nan, et al. \u0026ldquo;Keeping cool: Enhanced optical reflection and heat dissipation in silver ants.\u0026rdquo; Science (New York, NY) (2015).  ","permalink":"/ants/","tags":["science"],"title":"Ants thrive in the Sahara desert"},{"categories":null,"contents":" Proteins are central to biology. For the most part, proteins in the body are crucial for catalyzing reactions that carry out almost all of our biologial processes. For a protein to be useful, after it\u0026rsquo;s made by a ribosome, it needs to fold into a 3-dimensional structure that is unique to its sequence.\nIts been widely thought that every unique sequence corresponds to a single unique structure. However, in biology, there are always exceptions to the rule. Now Yong-Gang Chang and colleagues report in a recent article in Science that a protein responsible for timing the internal circadian clock has two distinct folds for the same sequence, and that both of these folds are crucial for its functioning! [1]\nThe researchers study the circadian clock of cyanobacteria. This internal clock is quite simple as it only requires three proteins to function by itself. These three proteins have roles in activating and repressing one another at time intervals that follow the Earth\u0026rsquo;s night-day cycle. These proteins are also capable of interacting with other proteins to cascade events to control time-specific biological functions in the cyanobacteria.\nThe researchers found that one of the proteins can adopt a very different fold when it is bound to one of other clock proteins compared to when it is unbound or \u0026ldquo;free.\u0026rdquo; In this fold-switched state, the protein flips an alpha-helix into a beta-strand and flips a different beta-strand turns into a new alpha-helix! The researchers theorized that they could tune the switching behavior by making specific mutations that could make the protein switch more often, or switch irreversibly.\nThis study shows that the ability to fold-switch and the speed of fold-switching is very important for regulating the circadian rhythms in the organisms studied. When mutated proteins that had messed-up switching were put into cells, it caused the cells to elongate without dividing and totally screwed up the phosphorylation cycles. Protein dynamics may be much more subtle and important than previously though, and clearly an amino acid sequence does not absolutely determine its structure.\nAnyone who studies proteins should care, because this report tells us that protein structures are more malleable than previously thought and, though subtle, the differences can be quite important for a healthy functioning biological organism.\nA lot of studies on proteins focus on crystallography which essentially \u0026ldquo;locks\u0026rdquo; in a conformational state. However, we may have been missing out on a lot of important conformation states if other proteins out there also have this \u0026ldquo;metamorphic\u0026rdquo; behavior using these techniques. [2] New techniques may be needed to unlock more of these interesting proteins!\nReferences  Chang, Yong-Gang, et al. \u0026ldquo;A protein fold switch joins the circadian oscillator to clock output in cyanobacteria.\u0026rdquo; Science (2015): 1260031. Murzin, Alexey G. \u0026ldquo;Metamorphic proteins.\u0026rdquo; Science 320.5884 (2008): 1725.  ","permalink":"/protein-switching/","tags":["science","protein folding"],"title":"Proteins can tune their folding to circadian rhythms"},{"categories":null,"contents":"This paper shows that the crumpling of our brain is much simpler than we thought . The crumples in our brain are just like the ones in crumpled paper. Bruno Mota and Suzana Herculano-Houzel find that our brain shares something in common with crumbled balls of paper - both did not evolve their folds in response to natural selection of their environment.\nThis paper shows that the crumpling of our brain is much simpler than we thought. What sets humans and other mammals apart is the ability to crumple our brains into our heads - by means of cortical folding. It had long been theorized that the folding - which is different for different animals - has something to do with ontology or evolution to control the number of neurons in parts of the brain. Now, it seems, its just basic physics!\nThe authors use datasets from about 14 papers that include all sorts of information including the number of cortial neurons, the cortial surface areas, brain volume, brain mass, thickness, etc. They find some correlation between these variables, but often with many outliers and generally low correlation.\nHowever, the authors find that the total surface area scales with the exposed surface area as a power law - indicating a self-similarity in the surfaces. That is, the brain is a fractal with dimension ~2.5. What other physical objects have a dimension of ~2.5? Well, crumpled sheets of paper do!\nThis paper may be of most interest to scientists who are pursuing the evolution of cortical folding - maybe they should stop pursuing that now\u0026hellip;\nSince the general mechanism is in place for understanding brain folding, we can now understand better what goes wrong and why - which could be very beneficial informaiton for determining the origins of diseases.\n","permalink":"/brain-folds/","tags":["science","brain"],"title":"The brain is like crumbled paper"},{"categories":null,"contents":" Language is an extremly important aspects of our human lives, and its aquisition might be an innate part of our brain that separates us from animals. However, different animals can understand language on different levels, as noted by Steven Pinker in his book The Language Instinct:\n The most receptive trainee for an artificial language with a syntax and semantics has been a parrot; the species with the best claim to recursive structure in its signaling has been the starling; the best vocal imitators are birds and dolphins; and when it comes to reading human intentions, chimps are bested by man\u0026rsquo;s best friend, Canis familiaris. [1]\n Since animals can understand humans on some level we must ask ourselves: How similar is animal language to human language? It seems the answer may be pretty similar, since a recent article in PLOS Biology has shown that, at the fundamental level, the vocalizations of the chestnut-crowned babbler can emulate some complex aspects of human language. [2]\nSo what? Sabrina and colleagues took these babbler birds and analyzed how they talk. They found that the birds communicate using different combinations of a small number of meaningless sounds. This ability is known as generative power which can allow limitless thoughts and ideas to be transmitted because their are many meaningless sounds and they can be combined in many, many ways. For example, the word \u0026ldquo;cat\u0026rdquo; has three sounds, /k/, /æ/ and /t/ which can also be rearranged to form the words \u0026ldquo;act\u0026rdquo;, \u0026ldquo;tack\u0026rdquo; or \u0026ldquo;at\u0026rdquo;. Previously researchers had found that some animals had generative power, but there was never any strong evidence that the rearrangements had a qualitative change in the contextual meaning.\nThe researchers came to this conclusion from using a clever experiment. The researchers found that birds had two types of sounds that they would mix together to make to get different words. When they played back the original sounds to the birds, the birds carried out the typical behavior. However, if certain sounds in the song were replaced by another sound the birds wouldn\u0026rsquo;t carry out the same behavior. That is, instead of saying \u0026ldquo;cat\u0026rdquo; to the birds, the researchers said \u0026ldquo;cot\u0026rdquo; and noticed the birds didn\u0026rsquo;t behave the same as if they said \u0026ldquo;cat\u0026rdquo;. This is an important distinction because it means that bird words are composed of several meaningless sounds in an important order and that these meaningless sounds could be rearranged for different words!\nWho cares? Biologists and philosophers should care about this one, because it tells us that the ability to generate words from meaningless sounds has evolved early on in lifeforms.\nNow what? It would be interesting to test other animals in a similar way to see whether other animals construct their words and sentences from a subset of meaningless sounds!\nReferences  Pinker, Steven. The language instinct: The new science of language and mind. Vol. 7529. Penguin UK, 1995. Engesser, Sabrina, et al. \u0026ldquo;Experimental Evidence for Phonemic Contrasts in a Nonhuman Vocal System.\u0026rdquo; PLoS Biol 13.6 (2015): e1002171.  ","permalink":"/b11653e28c3d45b3267a760d386d1849/","tags":["science","brain"],"title":"Animal language vs. human language"},{"categories":null,"contents":"Prigozhin et al. has brought simulations and experiments of protein dynamics closer together than ever before. They do this by creating a clever new protein that gives more detailed experimental insight and simulations on a state-of-the-art molecular dynamics supercomputer. Their insights add another brick into the path that scientists have been building for decades to bridge protein experiments and simulations. The only way to do this are through advances like this paper - creating experiments that are faster than ever before while creating simulations that can simulate reality for longer than ever before.\nFor decades researches have been trying to simulate the inner workings of biology from the bottom up. One of the smallest pieces of this giant puzzle is the protein - usually consisting of a few thousand atoms. However, even for a few thousand atoms the best computers in the world can only simulate them for one millionth of a second! That\u0026rsquo;s a problem and its one that Maxim Prigozhin, Shu-Han Chao, Shahar Sukenik, Taras Pogorelov, and Martin Gruebele have worked on in their latest work and partially solved using a unique protein construct and some stellar simulations.\nBiologists who want to validate their simulations. More opportunities are emerging to connect experimental and simulated data which will help guide new experiments and revise all energy functions that are used for simulations.\nPrigozhin et al. take advantage of the fact that they can add in fluorescent residues into their protein, without disturbing its structure. The fluorescence tells them how close certain residues are, and they can monitor this at a very fine timescale (microseconds). At the same time they use a supercomputer that can reach 0.1 microseconds of simulation. They get qualitative agreement using these methods which is a validation of simulations and comforting to theorists all around that their somewhat adhoc molecular dynamic schemes truly do approximate reality.\nThis study is only on one protein - and its a small protein compared to the rest of the proteome which have huge proteins!. Also, this one protein has a very special structure that allows it to be mutated with different special fluorescent residues which in turn allows scientists to target it with the most advanced experimental technologies. There are very proteins like this one, so this trick will only work once (maybe twice). Still, it is a steady step in the right direction - like all science!\n","permalink":"/simulation-and-experiment/","tags":["science"],"title":"Protein folding, simulation vs. experiment"},{"categories":null,"contents":" No one knows where neurons, the basic of human thought, come from. They are thought to have evolved once throughout the animal kingdom and perfected ever since. However, the newly revealed DNA sequencing of a comb jelly called \u0026ldquo;Pacific sea gooseberry\u0026rdquo;1 indicates this is not the case, as it has evolved its own neural system independently of any other sea jelly.\nThe brain is one of the most complex components of any anatomical system, maybe the most complicated thing in the universe - consisting of neurons, cerebral tissue, neurotransmitters, etc. Jellyfish have long been known to have a primitive version of a human brain, and indeed they both share a common ancestor that did. However, the ancestor to jelly fish and humans, placozoa, did not have neurons or muscles! This studies finds that a comb jelly - which shares a common ancestor with placozoa but derives its lineage from a different side of the tree - has neurons and muscles! The only plausible explanation is that this clade of comb jellies evolved neurons independently.\nIndeed, the giant research group (almost 50 scientists) played around with the neurons and found that classical neurotransmitters (GABA, acetylcholine, histamine) could not induce neural firing in the Pacific gooseberry, while some amino acids could (glutamate and aspartate) could induce firing. This actually goes along with prevailing theories that primordial nervous systems were peptide-based3. But in this case it is somewhat of a coincidence because the neural system of the Pacific sea gooseberry evolved completely independently of other known living things with neural systems.\nScientists are constantly trying to develop new biological systems from scratch - including lungs, hearts, and, yes, brains - for new regenerative medicine. Very few scientists had ever thought about creating a new brain from scratch, but this ctenophore gives us all hope that it may be possible. After all, if it can evolve separately it may not be all that complicated as we thought. And if we can understand it well enough, we can build it and we can improve it.\nNow what? The count of the number of organisms that evolved to independently evolve neurons and muscles is now at 2. The hunt will be on for finding other divergent species that independently evolved a set of neurons and/or muscles. After all, anything that happens twice will surely happen a third time.\nReferences  Moroz, Leonid L., et al. \u0026ldquo;The ctenophore genome and the evolutionary origins of neural systems.\u0026rdquo; Nature 510.7503 (2014): 109-114. \u0026ldquo;Cnidaria.\u0026rdquo; Wikipedia. Wikimedia Foundation, n.d. Web. 12 July 2015. Moroz, Leonid L. \u0026ldquo;On the independent origins of complex brains and neurons.\u0026rdquo; Brain, behavior and evolution 74.3 (2009): 177-190.  ","permalink":"/neuron-origin/","tags":["science","brain"],"title":"Making a brain from scratch"},{"categories":null,"contents":" I just recently wrote about a recent discovery that find people can smell without their noses (hint they use their skin) . Well, a new article by Lavi Secundo et. al. finds that the nose is still useful, since the olfactory receptors in a nose are so unique that they can distinguish humans from one another and this distinction can be used to find bone marrow transplant donors! [1]\nEvery person has about ~400 different olfactory receptor subtypes. The exact amount and kind of all receptors are probably unique for every person which implies that its likely that all people percieve smells slightly differently from one another. To test this, Lavi Secundo gave a bunch of people things to smell and asked them to rate the smell on a sliding scale about whether the smell was \u0026ldquo;masculine\u0026rdquo; or \u0026ldquo;lemony\u0026rdquo; or \u0026ldquo;edible\u0026rdquo;. After barging with smells, the researchers built up a matrix containing the smell profile of each person. Not surprisingly, the matrices were unique enough to easily identify people!\nWhats amazing, is that the researchers took this one step beyond just telling people apart. Its been established that the olfactory receptor genome is linked to the immune system genes in mice. [2] The researchers hypothesized that maybe the olfactory genes are also linked to the human immune system - the Human Leukocyte Antigens (HLAs). HLA matching is a prerequisite for bone marrow or blood cord transplants and its very important to have methods to determine whether people are matches (that hopefully are not super intrusive). It turns out that the ability to percieve smells did help to find HLA matches - in fact, using a simple smell test could reduce the number of HLA tests needed by more than 30%!\nThe health industry should care, because anything that cuts the cost and time of matching potential bone marrow donors could be very competitive in a market where the main alternative is to draw blood. Also, you should care because you can now feel special that you smell a world that is totally unique to you!\nThe authors didn\u0026rsquo;t actually compare the genomes of different patients to check how similar a smell fingerprint is to a HLA genotype or a olfactory receptor genotype\u0026hellip; so that\u0026rsquo;s one thing to do! Also there is a problem in that the sense of smell can change over time so the persistence of these types of tests would have to be validated for future uses.\nReferences  Secundo, Lavi, et al. \u0026ldquo;Individual olfactory perception reveals meaningful nonolfactory genetic information.\u0026rdquo; Proceedings of the National Academy of Sciences (2015): 201424826. Younger, Ruth M., et al. \u0026ldquo;Characterization of clustered MHC-linked olfactory receptor genes in human and mouse.\u0026rdquo; Genome research 11.4 (2001): 519-530.  ","permalink":"/sense-of-smell/","tags":["science"],"title":"Smelling bone marrow transplants"},{"categories":null,"contents":" A recent article published in PloS ONE attempts to figure out the origin of the rise in value of bitcoin. [1] The author, Ladislav Kristoufek, dissects the most probable sources of Bitcoin valuation influences using a special technique - cross wavelet transforms. This technique decomposes signals into the frequency domain and allows one to look at correlations between two sets of time-series data over various cycle lengths (e.g. daily or monthly or yearly) over time. If you don\u0026rsquo;t know how Bitcoin works, check out my recent post about it!\nBitcoin has been purported to be a very speculative asset and not as much a standard financial asset. Using cross wavelet transforms Kristoufek analyzes correlations between standard factors like Bitcoin price and Trade-Exchange ratio, Bitcoin supply, trade volume, hashrate, difficulty, number of trade transactions, Financial stress index, and the price of Gold. The researcher also investigates speculative properties, like involving correlations between Bitcoin and Google or Wikipedia searches.\nThe main finding is that, though Bitcoin is considered to be a purely speculative asset, it is highly influenced by standard long-term fundamental factors like supply, usage in trade and price levels. Still, there is high correlation between Bitcoin price and investors\u0026rsquo; interest which makes hinders the stability of the Bitcoin market.\nBitcoin is used by many and millions of dollars of Bitcoin exist on the market. Even if Bitcoin fails eventually, it will only likely be replaced by another similar cryptocurrency. [3] It is important for people that use Bitcoin to also understand the economic and financial aspects of the currency and how they are related to global events.\nCryptocurrencies are still fairly new, so it will be important to keep a finger on the pulse of the economic landscape of cryptocurrencies to understand how they rise, or fall.\nReferences  Kristoufek, Ladislav. \u0026ldquo;What are the main drivers of the Bitcoin price? Evidence from wavelet coherence analysis.\u0026rdquo; Plos ONE (2015): e0123923. Grinsted, A., J. C. Moore, S. Jevrejeva (2004), Application of the cross wavelet transform and wavelet coherence to geophysical time series, Nonlin. Process. Geophys., 11, 561566 Bornholdt, Stefan, and Kim Sneppen. \u0026ldquo;Do Bitcoins make the world go round? On the dynamics of competing crypto-currencies.\u0026rdquo; arXiv preprint arXiv:1403.6378 (2014).  ","permalink":"/bitcoin-forces/","tags":["science","bitcoin"],"title":"Driving forces of bitcoin"},{"categories":null,"contents":"Boss makes a really cool Audio player with guitar effects, the JS-8. It turns out that some of the cool sounds that is has can be downloaded directly via a little hacking. ​ ​ You\u0026rsquo;ll need to create a fake JS-8 device. To do this you basically download the backup data and then format a thumbdrive so that it looks like a JS-8 device.\n First download eBand JS-8 factory installed data in the included SD Card.\n Insert a thumbdrive, format it and name it \u0026ldquo;JS-8\u0026rdquo;.\n Unzip the \u0026ldquo;eBand JS-8 factory installed data in the included SD Card\u0026rdquo; and drag the \u0026ldquo;ROLAND\u0026rdquo; folder onto the newly formatted thumbdrive.\n Download the eBand Song List Editor Ver.1.01 for Windows\n Unzip, then install \u0026ldquo;eBand Song List Editor\u0026rdquo;\n Open \u0026ldquo;eBand Song List Editor\u0026rdquo;, it will automatically detect your faked JS-8 device and allow you to export all the songs from it.\n  ","permalink":"/js8/","tags":["coding"],"title":"Downloading sounds from the JS-8"},{"categories":null,"contents":" It\u0026rsquo;s very bold to invent a new word. Its even more bold to invent a new word and add that as a keyword of your science article! That\u0026rsquo;s exactly what Ankita Bansala, Lihua Zhua, Kelvin Yena, and Heidi Tissenbaumam did in their paper1 on which they question the value of the term \u0026ldquo;lifespan\u0026rdquo; and probe key assumptions using worms. Their newly invented term, gerospan, shows up about 34 times and, though they don\u0026rsquo;t say exactly where it comes from, it seems to be a mashup of the more common \u0026ldquo;lifespan\u0026rdquo; with the department of one of the authors (Gerontology, which means - literally - the study of old people).\nThe researchers made mutations in some worms that increased their lifespan2 and compared them to wild-type worms by looking at a number of quantitative physiological parameters including heat stress resistance, oxidative stress resistance, and motility. They then divided the lifespan of the worms into two parts - a healthspan and a gerospan which are basically the \u0026ldquo;good\u0026rdquo; part of life and the \u0026ldquo;crappy\u0026rdquo; part of life, respectfully. The researchers defined it as:\n Healthspan is defined as the period when the animal has greater than 50% of the maximal functional capacity of wild type.\nGerospan is defined as the period when the animal has less than 50% of the maximal functional capacity of wild type.\n By looking at the physiological parameters they determined at which point in the worms\u0026rsquo; lives the worm stopped being able to have 50% the maximaml functional capacity of that particular trait.\nThe researchers found that the worm mutants could live longer - up to twice as long as normal worms. Using these physiological parameters above to gauge well-being, though, the researchers showed that an increase in lifespan simply increases the gerospan (the crappy part of life) for every worm mutant. In other words, every worm that had mutations to live longer ended up just increasing the gerospan and not the healthspan.\nUnfortunately most people obsess about how long they live, neglecting whether their longevity of life is also healthy and happy. That\u0026rsquo;s the distinction the authors are looking at here. Though this study was done on worms, the ideas easily carry over to human medical practices and emphasize the need to study whether healthcare practices increase our own healthspan or our gerospan.\nAnyone who has to make a decision about how much money to invest in living longer - whether it be extreme (life support, cancer treatments) or minor (staying out of the sun for the rest of your life to avoid skin cancer). This study shows that we need to rethink the assumption that longer life is a better life, but rather longer healthier life is a better life.\nThis studies opens up a new avenue of research that has since been neglected - one that needs to now answer the question Quantity or Quality? The authors invented a new term, gerospan, that will help in this endeavor because it allows scientists to determine whether claims about longer lives are truly making a healthier, longer lives.\nReferences  Bansal, Ankita, et al. \u0026ldquo;Uncoupling lifespan and healthspan in Caenorhabditis elegans longevity mutants.\u0026rdquo; Proceedings of the National Academy of Sciences 112.3 (2015): E277-E286. Klass, Michael R. \u0026ldquo;A method for the isolation of longevity mutants in the nematode Caenorhabditis elegans and initial results.\u0026rdquo; Mechanisms of ageing and development 22.3 (1983): 279-286.  ","permalink":"/worm-mortality/","tags":["science"],"title":"Understanding human mortality through worms"},{"categories":null,"contents":" We smell with our nose, or do we? Recently scientists have found that for some smells we can smell with our skin, and those smells can heal wounds. Our ability to smell requires olfactory receptors which are often found in the nose. Humans have about 400 of these receptors, 350 of which are in the nose, while others have been shown to exist in sperm, the prostate, intestines, and kidneys. Recently Daniela Busse and colleagues discovered yet another place that olfactory receptors reside1, your skin!\nSkin is the largest organ in the human body as it protects our insides from our outsides. This recent report shows that our skin can also sense our environment. Busse and colleagues went on to show that the particular olfactory receptor is very good for detecint sandalwood oderants. Sandalwood oderants which are often found in perfumes and cleaning agents but originally come from the East Asian sandalwood tree (a rare tree and therefore an expensive substance).\nThe group also showed that incubating cells with the sandalore chemical increased proliferation of the cells by about 30%. Even more interesting, they showed that the sandalore smell increased wound healing - wounds were healed to 50% of initial wound in about half the time!\nEveryone should care, at least, to know that their skin may be more sensitive than we realize - as these authors show that the skin can \u0026ldquo;smell\u0026rdquo; a specific chemical. Biological engineers also care a lot, because this opens up new avenues for wound healing lotions by targeting the olfactory receptors in the skin to promote healing.\nHumans have hundreds of oderant receptors, but only about 40 have published ligands associated with them2. Scientists are now trying to catalog the ligands that associate with each receptor, as well as discover where all the remaining receptors are expressesd!\nReferences  Busse, Daniela, et al. \u0026ldquo;A synthetic sandalwood odorant induces wound-healing processes in human keratinocytes via the olfactory receptor OR2AT4.\u0026rdquo; Journal of Investigative Dermatology 134.11 (2014): 2823-2832. Mainland, Joel D., et al. \u0026ldquo;Human olfactory receptor responses to odorants.\u0026rdquo; Scientific data 2 (2015).  ","permalink":"/skin/","tags":["science"],"title":"Smelling with skin"},{"categories":null,"contents":"Here is a comprehensive list of all the books that I read in 2008. This list does not include Sherman\u0026rsquo;s Lagoon or Get Fuzzy comic books, and it does not include textbooks.\n \u0026ldquo;Jonathan Strange\u0026rdquo; by Susanna Clarke: This is a great magical realism book. It is along the lines of Harry Potter, and it depicts the magical epoch in the 19th century England. The two main characters share opposing extremist philosophies on the purpose knowledge: knowledge for the sake of knowing, or knowledge for application. \u0026ldquo;Like Water for Chocolate\u0026rdquo; by Laura Esquivel: This is another magical realism book, but based more around the magical culinary properties. The characters are very interesting, and their are pretty good recipes sprinkled in the book. \u0026ldquo;100 Years of Solitude\u0026rdquo; by García Márquez: Amazing book. The all-prevailing persistent mother is very inspiring. Many Terry Prachett novels including The Colour of Magic and #5-32 The Light Fantastic Equal Rites Mort Sourcery Wyrd Sisters Pyramids Guards! Guards! Eric Moving Pictures Reaper Man Witches Abroad Small Gods Lords and Ladies Men at Arms Soul Music Interesting Times Maskerade Feet of Clay Hogfather Jingo The Last Continent Carpe Jugulum The Fifth Elephant The Truth Thief of Time The Last Hero Monstrous Regiment Going Postal \u0026ldquo;Dear Theo\u0026rdquo; by Vincent Van Gough: Letters to Van Gough\u0026rsquo;s art dealing brother, Theo. These letters are riddled with inspirational dedication to art and life. \u0026ldquo;The Collected Poems of Robert Creeley 1945-1975\u0026rdquo;: I found about Robert Creeley through references from Robert Hunter after reading lyrics in the \u0026ldquo;Complete Annotated Grateful Dead Lyrics.\u0026rdquo; Robert Creeley is a extremely talented poet, and a lot of his poetry reminds me of the beatnik style of poetry that emerged in the 50\u0026rsquo;s. \u0026ldquo;Zen and the Art of Motorcycle Maintenance\u0026rdquo; by Robert Pirsig: This is a great book that centrals about the notion of quality. \u0026ldquo;Innumerancy\u0026rdquo; by John Paulos: Numerous examples of how the general society has trouble with basic numbers. This book is another reason why words for numbers like \u0026ldquo;billion\u0026rdquo; and \u0026ldquo;trillion\u0026rdquo; should be eliminated and replaced by scientific notation. \u0026ldquo;The Selfish Gene\u0026rdquo; by Richard Dawkins: A great book about how genotype becomes phenotype and why it explains many behaviors of many animals. Written by the most vehement atheist in the world. \u0026ldquo;The Elegant Universe\u0026rdquo; by Brain Greene: If your interested in String theory, just read the first chapter. The book doesn\u0026rsquo;t delve much farther into one of the leading Unified Theories of Everything than the first chapter and the rest of the book is pretty boring. \u0026ldquo;This is Your Brain on Music\u0026rdquo; by David Levitin: All about music from a music producer turned neurologist. The definition of music is more precise than many other scientific books I\u0026rsquo;ve read. The second half of the book is mostly devoted to how music affects the brain neurologically which is fascinating to no end. \u0026ldquo;Egg and Ego\u0026rdquo; by J.M. Slack: Life in a laboratory with great anecdotes.\n","permalink":"/books-2008/","tags":["thoughts","books"],"title":"Books I read"},{"categories":null,"contents":" Moses reached upon Mt. Sinai and was given the gift of the Ten Commandments which have dictated the fundamental rules of life ever since. Scrawled on the back of the Ten Commandments was actually another set of commandments that determined the virtuousness of science and the held commandments to follow when Moses led his people to the promised land to live fruitfully in the pursuit of scientific knowledge.\nI. Thou shalt always vortex thy cells. Often times suspensions contain elements of variable densities. Even after short periods of time, gravity causes denser particles to migrate toward the bottom of the container. This principle imbues that the distribution of a medium should be completely uniform before pipetting and measuring. The consequences of ignorance of the first commandment could result in large systematic errors.\nII. Thou shalt never fabricate experimental evidence. Science is the search for knowledge, and knowledge is the truth of the universe. By fabricating information about a research project, the scientist is violating the foundation of science itself. The consequences of this commandment will result in the revocation of the scientist\u0026rsquo;s reputability and status.\nIII. Thou shalt sanitize thy work bench This commandment ensures that no experiment will be conducted with error of contamination. The lab bench should always be cleansed with ethanol and Bunson burners should be used to sanitize the tops of bottles when they are opened. Keeping organized may will be inherent in this commandment as well. Searching for something delays much time that could be spent working on hypothesis or experiments. Cleanliness further enables a scientist to undergo optimal scientific activity.\nIV. Thy safety goggles shalt be worneth when thou workst with chemicals Even if the safety goggles are not needed, because of blindness or lack of eyeballs, the safety goggles should be worn. This commandment is not just meant to keep your eyes safe form the harmful chemicals. This commandment was put into place to insure that everything you look at will be seen through a pair of safety glasses. The safety glasses are to insure that your intuition is to automatically create a safe and productive research atmosphere. The glass in which you view the world should be a glass reveals safety. V. Labels shalt be adhered to containers\nCountless test tubes and containers are used every day containing a variety of different colonies or substances. To keep experiments from contamination the correct labels should clearly dictate what any container holds. Writing of the date will imply the correct calculations when performing a time variant experiment.\nVI. Thou shalt keepeth a lab notebook No memory is infallible. In order to maximize progress, a lab notebook should be established to inform one\u0026rsquo;s self and others on the progress of a research campaign. The lack of a notebook can cause confusion or failure of a experiment.\nVII. Thou shalt doubteth everything. To a certain extent, a good researcher should doubt everything, with emphasis on presently accepted ideas. Throughout the 17th and 18th century, science had to feud with the rule of the church. Eventually the church doctrine backed down and allowed science to advance. However, today we are still restrained by our absolute faith in the past.\nThis image shows measurements made on types of particles and the error from past publications. Notice that the measurement and error stays constant and suddenly changes abruptly. This abrupt change is because the experiment did not attempt to conform to previous methods.\nExperiments can be carried out endlessly. Tweaking the experiment over and over to get the same result as a previous publication will only dampen the progress of science. Consider the previous publications heavily, but doubt constantly.\nVIII. Thou shalt not talk fast. Think before talking. Make sure you understand the concept in your head clearly so it can be verbalized to someone else. The teacher benefits from a deeper understanding of the concept and the student benefits from having the idea explained concisely and slowly. Use measured words when talking. Don\u0026rsquo;t let your mouth become plagued by garrulousness.\nIX. Haste makes waste. Scribbling in a lab notebook or scrawled labels will make life difficult later. Sloppy experiments create irreproducible results, and makes a waste of time for the whole lab. It is possible to be timely and organized. A mistake which is an accident can result in a new discovery. A mistake which is caused by rushing to put out results will almost always result in a waste of materials and time. Patience is the key virtue for this commandment.\nX. Thou shalt enjoy life This commandment is possibly the hardest to maintain. The tenth commandment deems having a healthy lifestyle, which equates to eating all the basic food groups in their respective weights, regular exercise, and reading the comics in the newspaper every day. Keep everything in moderation.\n","permalink":"/ten-commandments/","tags":["science","thoughts"],"title":"Ten Commandments (for a scientist)"},{"categories":null,"contents":"In the beginning, 10 to 20 times 109 years ago, there was a big bang. A hundredth of a second later electrons, photons and neutrinos appeared. Three minutes later the quarks of the fundamental particles formed into light nuclei, approximently 76% Hydrogen and 24% Helium. 300,000 years later G-d said, \u0026ldquo;Let there be light\u0026rdquo;; and the nuclei combined with electrons to form neutral atoms, making the universe transparent to photons.\nG-d saw that the light was good, and created and destroyed stars 109 years later. The recycling of the cosmos produced and dispersed elements into the universe. 3.6x109 years after the first star formed, the heavier elements combined with Hydrogen and Helium to form our Sun and Solar System. He separated the light from the darkness. G-d called the light \u0026ldquo;day,\u0026rdquo; and the darkness he called \u0026ldquo;night.\u0026rdquo; And there was evening, and there was morning—the first day.\nAbout 4x108 years after the formation of the Solar system G-d said, \u0026ldquo;Let there be an expanse between the waters to separate water from water.\u0026rdquo; So G-d made the expanse and separated the water under the expanse from the water above it. And it was so. G-d called the expanse \u0026ldquo;sky.\u0026rdquo; And G-d said, \u0026ldquo;Let the water under the sky be gathered to one place, and let dry ground appear.\u0026rdquo; And it was so. G-d called the dry ground \u0026ldquo;land,\u0026rdquo; and the gathered waters he called \u0026ldquo;seas.\u0026rdquo; And G-d saw that it was good. And there was evening, and there was morning—the second day.\nThen, 5x108 years later G-d said, \u0026ldquo;Let the land produce self-replicating organisms: each with DNA-RNA that allowed for the formation of proteins to carry out certain functions.\u0026rdquo; And it was so that prokaryotic cells formed. The land produced vegetation: plants bearing seed according to their kinds and trees bearing fruit with seed in it according to their kinds. And G-d saw that it was good. And there was evening, and there was morning—the third day.\nOn the fourth day, G-d rests.\nAnd then 1.5x109 years later G-d said, \u0026ldquo;Let the water teem with living creatures made eukaryotic cells.\u0026rdquo; So G-d created the great creatures of the sea and every living and moving thing with which the water teems, according to their kinds. And G-d saw that it was good. G-d blessed them and said, \u0026ldquo;Be fruitful and self-replicate and fill the water in the seas.\u0026rdquo; And there was evening, and there was morning—the fifth day.\nAnd then 7x108 years later G-d said, \u0026ldquo;Let the land produce living creatures according to their kinds: livestock, creatures that move along the ground, and wild animals, each according to its kind.\u0026rdquo; And it was called the Cambrian explosion. G-d made the wild animals according to their kinds, the livestock according to their kinds, and all the creatures that move along the ground according to their kinds. And G-d saw that it was good.\nFinally, 6x106 years ago, G-d said, \u0026ldquo;Let us make man/woman evolve from currently animals.\u0026rdquo; So man/woman diverged from a chimpanzee. G-d blessed them and said to them, \u0026ldquo;Be fruitful and increase in number; fill the earth and subdue it. Rule over the fish of the sea and the birds of the air and over every living creature that moves on the ground.\u0026rdquo;\nThen G-d said, \u0026ldquo;I give you every seed-bearing plant on the face of the whole earth and every tree that has fruit with seed in it. They will be yours for food. And to all the beasts of the earth and all the birds of the air and all the creatures that move on the ground—everything that has the breath of life in it—I give every green plant for food.\u0026rdquo; And it was so.\nG-d saw all that he had made, and it was very good. And there was evening, and there was morning—the sixth day.\nG-d has not finished the heavens and the earth in all their vast array. He is resting until the seventh day, 4.94x108 years from now.\n","permalink":"/genesis/","tags":["thoughts","science"],"title":"Genesis"},{"categories":null,"contents":"     var SHA512 = new Hashes.SHA512; function display(text) { $('#form').fadeOut('slow', function() { $('#outputBox').text(text); $('#outputContainer').fadeIn('slow'); }); }; function unpack(str) { var bytes = []; for(var i = 0; i  8); bytes.push(char \u0026 0xFF); } return bytes; } function pack(bytes) { var str = \"\"; for(var i = 0; i     Hash      Another     document.getElementById(\"inputtext\").focus();   ","permalink":"/hash2/","tags":["tools"],"title":"Hash v.2"},{"categories":null,"contents":"     var SHA512 = new Hashes.SHA512; function display(text) { $('#form').fadeOut('slow', function() { $('#outputBox').text(text); $('#outputContainer').fadeIn('slow'); }); }; function unpack(str) { var bytes = []; for(var i = 0; i  8); bytes.push(char \u0026 0xFF); } return bytes; } function pack(bytes) { var str = \"\"; for(var i = 0; i     Hash      Another     document.getElementById(\"inputtext\").focus();   ","permalink":"/hash/","tags":["tools"],"title":"Hash v.1"},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\`\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\`\nEdit fuse.js options to Search static/js/search.js ` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\`\n","permalink":"/search/","tags":null,"title":"Search Results"}]