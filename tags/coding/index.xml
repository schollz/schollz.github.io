<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on Zack&#39;s Notablog</title><link>/tags/coding/</link><description>Recent content in Coding on Zack&#39;s Notablog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Jun 2018 10:01:55 -0700</lastBuildDate><atom:link href="/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Self-hosting with fossil, an alternative to git</title><link>/fossil/</link><pubDate>Sun, 10 Jun 2018 10:01:55 -0700</pubDate><guid>/fossil/</guid><description>Github, Gitlab, Bitbucket are all web interfaces for git. They all do similar things that add on features that aren&amp;rsquo;t implicit in git, like issues and wiki, etc.
Unbeknownst to some, fossil is an alternative to git that actually has built-in issues, wiki, and easily self-hosts. This is a quickstart to get started with hosting and cloning fossil repos. The official quickstart is very good, although I realized a few tricks in getting the hosting to work on HTTPS behind a reverse-proxy, which are described here.</description></item><item><title>How to post a site to IPFS easily</title><link>/how-to-post-a-site-to-ipfs/</link><pubDate>Sun, 03 Jun 2018 14:13:59 -0700</pubDate><guid>/how-to-post-a-site-to-ipfs/</guid><description>There&amp;rsquo;s a bit of a chicken-and-egg problem with IPFS to get pages to link to each other that is frusturating to IPFS users. To have the IPFS hash for the link you first need to get the IPFS hash of the other link. One way around this is to make all the URLs relative. This is a lot easier to do than you think.
First make a blog however you want and then host it locally, e.</description></item><item><title>Installing Keybase on Chromebook</title><link>/installing-keybase-on-chromebook/</link><pubDate>Mon, 28 May 2018 10:28:00 -0700</pubDate><guid>/installing-keybase-on-chromebook/</guid><description>Keybase is a great system for mounting a end-to-end encrypted filesystem. It also has an encrypted git feature which is great for storing secure information in repositories. While keybase has releases for most systems, that don&amp;rsquo;t have any releases for armh, of which Chromebooks fall.
With help from the keybase developers I have determined a way to get keybase up and running on a Chromebook in no time.
First install the pre-requisites:</description></item><item><title>My Favorite Vimrc</title><link>/my-favorite-vimrc/</link><pubDate>Mon, 28 May 2018 10:25:45 -0700</pubDate><guid>/my-favorite-vimrc/</guid><description>I&amp;rsquo;ve been enjoying writing in vim a lot more. There is a nice and simple way to make writing a lot easier (word-wrapping, nice color scheme). You can just make the following config file (save as ~/.vimrc):
func! WordProcessorMode() set columns=80 setlocal formatoptions=1 setlocal noexpandtab map j gj map k gk setlocal spell spelllang=en_us set complete+=s set formatprg=par setlocal wrap setlocal linebreak set foldcolumn=3 highlight Normal ctermfg=black ctermbg=grey hi NonText ctermfg=grey guifg=grey endfu com!</description></item><item><title>Shallow `go get`</title><link>/shallow-go-get/</link><pubDate>Sun, 06 May 2018 07:00:57 -0700</pubDate><guid>/shallow-go-get/</guid><description>This is a little hack to use shallow clones for new git checkouts with go get. Unfortunately for Gophers, this has been an open issue for three years counting without a workable solution aside from patching the go toolchain yourself. This solution utilizes a git wrapper that determines if a pull/clone is happening and then makes sure it is shallow.
The wrapper is only a few lines of code, here&amp;rsquo;s the main.</description></item><item><title>Painters &amp; Hackers</title><link>/hackers-and-painters/</link><pubDate>Sun, 29 Apr 2018 22:22:02 -0700</pubDate><guid>/hackers-and-painters/</guid><description>Hacking1 and painting2 are both hobbies for me. I write programs for myself, to make things easier or just because they are fun to write. Few of these programs are useful3. More often I write useless programs, like a program to determine if random squiggles generate random numbers4. I started painting and coding about fifteen years ago5 for my own enjoyment. Along the way, though I&amp;rsquo;ve found some interesting comparisons about the reception of paintings and programs and whats it like to interact with other hackers and painters.</description></item><item><title>Average chocolate chip cookies</title><link>/average-cookies/</link><pubDate>Fri, 23 Mar 2018 20:57:15 -0700</pubDate><guid>/average-cookies/</guid><description>I recently wrote a program to determine consensus recipes. It scrapes the web for a thousand recipes for a given recipe (e.g. cookies), then clusters the recipes and finally computes an average ingredient list for each cluster. This idea was prompted by making brownies, because I wasn&amp;rsquo;t sure whether to use cocoa, chocolate, or both. Turns out there is a recipe for each variation of brownie.
I decided to try out my software in the real world.</description></item><item><title>Consensus cookery</title><link>/consensus-cookery/</link><pubDate>Tue, 20 Mar 2018 09:41:01 -0600</pubDate><guid>/consensus-cookery/</guid><description>Sometimes when I want a recipe to cook something new I will find several recipes for the same thing and try to use them as a guide to generate an average or &amp;ldquo;consensus&amp;rdquo; recipe. This code should make it easy to generate consensus recipes (useful!) and also show variation between recipes (interesting!).
Finding a consensus recipe requires first clustering many recipes. This is because a single recipe (e.g. a recipe for brownies) might have many significant variations (e.</description></item><item><title>FIND3</title><link>/find3/</link><pubDate>Sat, 17 Mar 2018 09:41:01 -0600</pubDate><guid>/find3/</guid><description>There is a new version of FIND now, called &amp;ldquo;FIND3.&amp;rdquo; Its public on Github now.
FIND is the Framework for Internal Navigation and Discovery. It is basically an indoor GPS for your house or business, using only a simple smartphone or laptop.
This is an idea I started thinking about 8 years ago and wrote the first code in PHP almost four years ago, dubbed version 0, as a proof-of-concept.</description></item><item><title>Code I wrote</title><link>/code-i-wrote/</link><pubDate>Fri, 22 Dec 2017 05:48:49 -0700</pubDate><guid>/code-i-wrote/</guid><description>In 2017, I wrote 17 programs. Some or neat tools, some are playthings, and some are libraries for Go.
howmanypeoplearearound (2,967 stars) Count the number of people around you üë® ‚Äç üë® ‚Äç üë¶ by monitoring wifi signals üõ∞. PIanoAI (233 stars) Realtime piano learning and accompaniment from a Pi-powered AI üéπ. progressbar (215 stars) A really basic thread-safe progressbar for Golang applications. croc (207 stars) Easily get things from one computer to another üêä.</description></item><item><title>Anonymous nonfiction</title><link>/anonfiction/</link><pubDate>Sun, 17 Dec 2017 07:16:03 -0700</pubDate><guid>/anonfiction/</guid><description>Sarcasm is the native language of the Internet. Unfortunately, since sarcasm is a close friend to cynicism, this can make the Internet a negative and disillusioning place. I decided to make an effort to make a place on the Internet that is more positive and reflective. This place would be where you can present your own story, anonymously and sincerely. The result was initially called &amp;ldquo;Stories, Incognito&amp;rdquo; but I later decided on the name &amp;ldquo;anonfiction&amp;rdquo; (i.</description></item><item><title>How to easily make nested templates (Go)</title><link>/golang-nested-templates/</link><pubDate>Fri, 10 Nov 2017 04:50:00 -0700</pubDate><guid>/golang-nested-templates/</guid><description>https://play.golang.org/p/OVkruYsBVV
package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;text/template&amp;#34; ) type View struct { Title string Content string } func main() { header := ` {{define &amp;#34;header&amp;#34;}}&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;{{ $.Title }}&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; {{end}}` page := ` This line should not show {{define &amp;#34;indexPage&amp;#34;}}&amp;lt;html&amp;gt; {{template &amp;#34;header&amp;#34; .}}&amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;{{ .Content }}&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; {{end}}` view := View{Title: &amp;#34;some title&amp;#34;, Content: &amp;#34;some content&amp;#34;} // Here we try to set which page to view as content t := template.</description></item><item><title>Send a file with netcat</title><link>/send-with-netcat/</link><pubDate>Sat, 28 Oct 2017 04:15:10 -0600</pubDate><guid>/send-with-netcat/</guid><description>I&amp;rsquo;ve mentioned how to send a file with IPFS and also how to send a file with an assortment of modern techniques. Here&amp;rsquo;s yet another method to send a file. It&amp;rsquo;s only a line of bash, and you can get a nice progress bar and upload to any server that is listening on a certain TCP port.
On the server computer, server.com, that is receiving the file, just do:
netcat -l -p 6000 &amp;gt; somefile On the other computer that is sending the file just do:</description></item><item><title>Look ma, no hard disk</title><link>/just-ram/</link><pubDate>Fri, 27 Oct 2017 04:51:39 -0600</pubDate><guid>/just-ram/</guid><description>I had a bad habit of leaving everything in my Downloads folder, and never clearing anything out. I might need it, assume, at some point. However, this is never true. To get myself out of this &amp;ldquo;I might need it*&amp;rdquo; mindset, I started deleting my Downloads/ folder every time I start my computer. This way, I had to remember, that anything I put in there would disappear when I turned my computer off.</description></item><item><title>Sending a file in 2017</title><link>/sending-a-file/</link><pubDate>Sat, 21 Oct 2017 20:11:36 -0600</pubDate><guid>/sending-a-file/</guid><description>My good friend Jessie and I want to watch a documentary movie on turkeys together.1 I have the file on my computer and she does not, so I want to send this file to her directly2 from my computer. There are a couple of restrictions though:
the turkey documentary is a ~1 GB file Jessie lives 2,000 miles away in a different country Jessie uses Windows OS Jessie is not a programmer, and avoids anything that involves running something on the command-line How should I send the movie, in the fastest possible way, so we can start learning about turkeys together?</description></item><item><title>Send a file with IPFS</title><link>/ipfs-transfer/</link><pubDate>Sun, 15 Oct 2017 21:27:07 -0600</pubDate><guid>/ipfs-transfer/</guid><description>Sending a file with IPFS is fun (after all it is leveraging the peer-to-peer network and content-addressable blocks of data!) and easy.
Install IPFS Here is the basic instructions to install:
wget https://dist.ipfs.io/go-ipfs/v0.4.11/go-ipfs_v0.4.11_linux-amd64.tar.gz tar -xvzf go-ipfs* cd go-ipfs sudo ./install.sh ipfs init ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/9001 ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001 The last two lines are useful for listening on LAN connected devices. The port 0.0.0.0 will let run the IPFS daemon on a different computer but still use the peer-to-peer portal from that computer.</description></item><item><title>Using crawdad</title><link>/crawdad/</link><pubDate>Wed, 11 Oct 2017 20:03:10 -0600</pubDate><guid>/crawdad/</guid><description>crawdad is a simple, yet powerful alternative for scraping in a distributed, persistent manner (backed by Redis). It can do simple things, like generating site maps. It can also do complicated things, like extracting all the quotes from every page on a quotes website (tutorial follows).
Install First get Docker which will be used for running Redis.
Then you can simply download crawdad:
$ wget https://github.com/schollz/crawdad/releases/download/v3.0.0/crawdad_3.0.0_linux_amd64.zip $ unzip crawdad*zip $ sudo mv crawdad*amd64 /usr/local/bin/crawdad Unlike many other scraping frameworks, crawdad is a single binary that has no dependencies.</description></item><item><title>Read news in the terminal with Docker</title><link>/docker-news/</link><pubDate>Thu, 05 Oct 2017 05:44:33 -0600</pubDate><guid>/docker-news/</guid><description>I&amp;rsquo;ve been working on readable, a simple bookmarklet for easily reading articles in the browser (Github). As part of this, I made a Docker image that utilizes Mozilla&amp;rsquo;s readability package.
You can easily use the Docker image to directly read articles from the command line.
First pull it.
$ docker pull schollz/readable Then set a URL that contains a news article:
$ URL=http://www.cnn.com/2017/10/03/world/nobel-physics-prize-2017/index.html Then read!
$ docker run --rm -t schollz/readable $URL | more ---------------------------------------------------------- Nobel Prize in Physics goes to &amp;#39;black hole telescope&amp;#39; trio ---------------------------------------------------------- Story highlights - The development proves Einstein&amp;#39;s prediction of gravitational waves - More than 1,000 people worked on the technology over four decades (CNN)The 2017 Nobel Prize in Physics has been awarded to Rainer Weiss, Barry C.</description></item><item><title>Automatic captioning of images using Javascript</title><link>/captioning-images/</link><pubDate>Wed, 27 Sep 2017 13:55:03 -0600</pubDate><guid>/captioning-images/</guid><description>I like to caption my images and I like to write in Markdown. However, it is currently not possible to make captioned images, i.e. make an HTML figure using just Markdown - at least at the current spec (version 0.27) at the time of this writing. Of course, Markdown supports HTML, so you could just write a &amp;ldquo;&amp;lt;figure&amp;gt;&amp;rdquo; tag everywhere instead of writing with the Markdown &amp;ldquo;![]()&amp;rdquo; image syntax. However, I want to use the &amp;ldquo;!</description></item><item><title>OSS divisions</title><link>/oss/</link><pubDate>Sun, 17 Sep 2017 09:04:40 -0600</pubDate><guid>/oss/</guid><description>There are two reasons I think its good for everyone to have a good division between &amp;ldquo;personal&amp;rdquo; and &amp;ldquo;corporate&amp;rdquo; use for open-source software (OSS).
If you, the OSS maintainer, are compensated, everyone benefits. While your time spent coding your OSS is valuable, I think the frictionless delivery of new features and bug fixes is something that shouldn&amp;rsquo;t go away. Since I&amp;rsquo;m not actively supporting you financially to work on this, I can only hope that someone does so I can benefit.</description></item><item><title>Recursive ingredients</title><link>/recursive-ingredients/</link><pubDate>Fri, 23 Jun 2017 19:19:15 -0700</pubDate><guid>/recursive-ingredients/</guid><description>What would happen if you made a recipe out of the ingredients for a recipe? What if you repeated this process over and over? I ended up doing this and generated the recipe that starts with the most basic ingredients - dirt, water and sun.
Here are the ingredients of my favorite recipe - a recipe for bread - that I have made almost every week during the past decade:</description></item><item><title>Why Go?</title><link>/why-go/</link><pubDate>Sat, 29 Apr 2017 09:48:59 -0600</pubDate><guid>/why-go/</guid><description>Lots of people ask me this question, and I end up writing the same answer over and over. I just wrote my plain answer here so I can just link to it. Don&amp;rsquo;t hesitate to ask me other questions, though if you need. The basic answer is: because of time and money.
Coding in Go saves me time. When I write code, I often write run the program periodically to test it.</description></item><item><title>Using Wordpress with Docker</title><link>/wordpress-on-docker/</link><pubDate>Wed, 11 Jan 2017 13:54:51 -0600</pubDate><guid>/wordpress-on-docker/</guid><description>I like wordpress, but it is very intensive to get working, as it uses a lot of PHP and requires SQL. Of course, nowadays you can do everything in Docker, so here is my method for getting wordpress to work great on Docker.
Using Docker, I was able to get 2 blogs run on the smallest DigitalOcean droplet (which was already running two dozen other things). Each blog required 360MB of RAM, and the total Docker space was 3.</description></item><item><title>Skip swiping with adb and bash</title><link>/skip-swiping/</link><pubDate>Sat, 10 Sep 2016 06:41:49 -0600</pubDate><guid>/skip-swiping/</guid><description>Like many, I&amp;rsquo;ve used dating apps (Tinder / Bumble / OkCupid) to find potential dates. I was annoyed at having to swipe right on a lot of people who would probably never respond to me after I swiped right. It seemed to me to be a waste of time to swipe through those people who would not actually be available in my dating pool. I&amp;rsquo;d rather only view a pool of people who respond to me so we can open a dialog right away to see whether we would match.</description></item><item><title>Downloading sounds from the JS-8</title><link>/js8/</link><pubDate>Fri, 10 Apr 2015 13:54:40 -0600</pubDate><guid>/js8/</guid><description>Boss makes a really cool Audio player with guitar effects, the JS-8. It turns out that some of the cool sounds that is has can be downloaded directly via a little hacking. ‚Äã ‚Äã You&amp;rsquo;ll need to create a fake JS-8 device. To do this you basically download the backup data and then format a thumbdrive so that it looks like a JS-8 device.
First download eBand JS-8 factory installed data in the included SD Card.</description></item></channel></rss>